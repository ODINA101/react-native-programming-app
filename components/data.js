export default Data = {
    htmlcss:{
    chapters:[
        {
            title:"თავი 1.HTML5-ის შესავალი",
            content:[
                {
                    title:"რა არის HTML",
                    data:`HTML (HyperText Markup Language) წარმოადგენს ჰიპერტექსტური მარკირების ენას, რომელიც ძირითადად გამოიყენება ინტერნეტის ქსელის დოკუმენტების შესაქმნელად. HTML სათავეს იღებს გასული საუკუნის 90-იანი წლებიდან, როგორც ვებგვერდების შესაქმნელი პრიმიტიული ენა, ხოლო დღეისთვის ინტერნეტი წარმოუდგენელია ამ ენის გარეშე. საიტების აბსოლუტური უმრავლესობა ასე თუ ისე იყენებს HTML-ს.

                    2014 წელს ოფიციალურად დასრულდა მუშაობა ახალ სტანდარტზე - HTML5-ზე, რომელმაც ფაქტიურად რევოლუციური ცვლილებები შეიტანა HTML-ში.
                    
                    კონკრეტულად რა მოიტანა HTML5-მა?
                    
                    HTML 5-მა განსაზღვრა პარსინგის ახალი ალგორითმი DOM-ის (Document Object Model) სტრუქტურის შესაქმნელად;
                    ახალი ელემენტების და ტეგების დამატება, როგორიცაა ელემენტები video, audio და სხვა;
                    HTML-ის არსებული ელემენტების გამოყენების წესების და სემანტიკის ხელახალი განსაზღვრა.
                    ახალი ფუნქციების დამატებით HTML5 გახდა არა უბრალოდ HTML-ის ახალი ვერსია, არამედ ფაქტიურად გახდა პლატფორმა პროგრამული უზრუნველყოფის შესაქმნელად, ხოლო მისი გამოყენების სფერო შორს გასცდა ინტერნეტის ფარგლებს: HTML5 გამოიყენება მობილური აპლიკაციებისთვის ანდროიდის, iOS, Windows Mobile ბაზაზე, ასევე დესკტოპ-პროგრამების შესაქმნელადაც.
                    
                    საბოლოოდ, HTML5 ძირითადად გამოიყენება შემდეგი დანიშნულებით:
                    
                    HTML5, როგორც ჰიპერტექსტური მარკირების განახლებული ენა, როგორც წინა HTML4-ის განვითარება;
                    HTML5, როგორც მძლავრი პლატფორმა ვებაპლიკაციების შექმნისთვის, რომელიც HTML5-თან ერთად ასევე მოიცავს პროგრამირების ენა JavaScript -ს და სტილების კასკადურ ცხრილებს CSS3-ს.
                    HTML5-ის განვითარებით დაკავებულია World Wide Web Consortium (შემოკლებით W3C  - მსოფლიო ქსელის კონსორციუმი) - დამოუკიდებელი საერთაშორისო ორგანიზაცია, რომელიც განსაზღვრავს HTML5-ის სტანდარტებს სპეციფიკაციების სახით. მიმდინარე სრული სპეციფიკაციის ნახვა შესაძლებელია მისამართზე https://www.w3.org/TR/html5/.
                    
                    ბრაუზერების მხარდაჭერა
                    
                    უნდა აღინიშნოს, რომ HTML5-ის სპეციფიკაციებსა და ვებბრაუზერების მიერ ამ ტექნოლოგიების გამოყენებას შორის ყოველთვის იყო სხვაობა, თუმცა ბრაუზერების უმეტესობამ ამ სტანდარტების დანერგვა დაიწყო ჯერ კიდევ მის ოფიციალურად გამოქვეყნებამდე და დღეისათვის ბრაუზერების ბოლო ვერსიების უმრავლესობა იყენებს HTML5-ის ფუნქციონალის უმეტეს ნაწილს (Google Chrome, Firefox, Opera, Internet Explorer 11, Microsoft Edge), ამასთნ ბრაუზერების ძველ ვერსიებს არ გააჩნიათ HTML5-ის მხარდაჭერა, მაგალითად Internet Explorer 8 და უფრო ადრეული ვერსიები, ხოლო IE 9, 10-ს გააჩნია სტანდარტების მხოლოდ ნაწილის მხარდაჭერა.
                    
                    ამასთან, იმ ბრაუზერებს, რომელთაც გააჩნიათ HTML5-ის სტანდარტების მხარდაჭერა, შესაძლოა არ გააჩნდეთ კონკრეტული ელემენტების მხარდაჭერა და ეს უნდა გავითვალისწინოთ მუშაობისას.
                    
                    ბრაუზერის მიერ HTML5-ს სტანდარტების მხარდაჭერის დონის შემოწმება შესაძლებელია სპეციალური სერვისის მეშვეობით მისამართზე: http://html5test.com.
                    
                    საჭირო ინსტრუმენტები
                    რა არის საჭირო HTML5-თან სამუშაოდ? პირველ რიგში საჭიროა ტექსტური რედაქტორი ვებგვერდის html-ის ტექსტის ასაკრეფად. ამ დროისათვის ერთ-ერთი ტექსტური რედაქტორი, რომელიც ფართოდ გამოიყენება არის Notepad++, მისი ნახვა და გადმოწერა შეიძლება შემდეგი მისამართიდან: http://notepad-plus-plus.org. მისი უპირატესობა მდგომარეობს იმაში რომ არის უფასო და გააჩნია კოდის შემოწმების ინსტრუმენტები.
                    
                    ასევე ფართოდ გამოიყენება კროსპლატფორმული ტექსტური რედაქტორი Visual Studio Code. მას გააჩნია უფრო მეტი შესაძლებლობები, ვიდრე Notepad++-ს და ასევე არის უფასო, გარდა ამისა, მისი გამოყენება შეიძლება როგორც Windows-ში, ასევე MacOS-ში და Linux-ის ბაზაზე არსებულ ოპერაციულ სისტემებში. ამ სახელმძღვანელოს შექმნის პროცესში გამოყენებულ იქნა Visual Studio Code.
                    
                    ასევე დაგვჭირდება ვებბრაუზერი შექმნილი ვებგვერდების გაშვებისა და შემოწმებისთვის. ამ მიზნებისთვის გამოდგება ნებისმიერი გავრცელებული ბრაუზერი - Google Chrome, Mozilla Firefox, Microsoft Edge, Opera.`
                },
                {
                    title:"HTML5-ის ელემენტები და ატრიბუტები",
                    data:`სანამ შევუდგებით საკუთარი ვებგვერდის შექმნას, განვიხილოთ ძირითადი სამშენებლო ბლოკები, აგურები, რისგანაც შედგება ვებგვერდი.

                    HTML5-ის დოკუმენტი, ისევე როგორც ნებისმიერი სხვა დოკუმენტი, შედგება ელემენტებისაგან, ხოლო ელემენტები შედგება ტეგებისაგან. როგორც წესი, ელემენტს გააჩნია საწყისი და საბოლოო ტეგი, რომლებიც მოქცეულია კუთხოვან ფრჩხილებში. მაგალითად:
                    
                    <div>div ელემენტის ტექსტი</div>
                    
                    აქ განსაზღვრულია ელემენტი div, რომელსაც გააჩნია საწყისი ტეგი <div> და საბოლოო ტეგი</div>. მათ შორის მოქცეულია div ელემენტის შიგთავსი. ამ შემთხვევაში შიგთავსის სახით წარმოდგენილია ტექსტი "div ელემენტის ტექსტი".
                    
                    ელემენტი ასევე შეიძლება შედგებოდეს ერთი ტეგისგან, მაგალითად ელემენტი <br />, რომლის დანიშნულებაა სტრიქონის გადატანა:
                    
                    <div>div ელემენტის <br />ტექსტი </div>
                    
                    ასეთ ელემენტს ასევე უწოდებენ ცარიელ ელემენტს. თუმცა მაგალითში გამოყენებულია სლეში ("/"), მაგრამ მისი გამოყენება შესაძლებელია სლეშის გარეშეც შემდეგი სახით: <br>.
                    
                    თითოეულ ელემენტს საწყის ტეგში შეიძლება ჰქონდეს ატრიბუტები, მაგალითად:
                    
                    <div style="color:red;">ღილაკი</div>    
                    <input type="button" value="დააჭირეთ">
                    აქ მოცემულია 2 ელემენტი: div და input. div ელემენტს გააჩნია ატრიბუტი style. ტოლობის ნიშნის შემდეგ ბრჭყალებში წერია ატრიბუტის მნიშვნელობა type="color:red;". ამ შემთხვევაში "color:red;" განსაზღვრავს, რომ ტექსტის ფერი არის წითელი. მეორე ელემენტს - input-ს გააჩნია 2 ატრიბუტი: type (მიუთითებს ელემენტის ტიპს - ღილაკი) და value (განსაზღვრავს ღილაკის ტექსტს).
                    
                    არსებობს გლობალური, ანუ ყველა ელემენტისათვის საერთო ატრიბუტები, როგორიცაა მაგალითად, style, და არის სპეციფიური, რომელიც გამოიყენება მხოლოდ ზოგიერთი ელემენტისათვის, მაგალითად type. ჩვეულებრივი ატრიბუტების გარდა არსებობს ლოგიკური ატრიბუტები, რომელთაც შეიძლება მნიშვნელობა არ მიენიჭოს, მაგალითად disabled:
                    <View style={{color:"red"}}>
                    <input type="button" value="დააჭირეთ" disabled>
                    </View>                    
                    ატრიბუტი disabled მიუთითებს, რომ ელემენტი არააქტიურია.
                    
                    გლობალური ატრიბუტები
                    
                    HTML5-ში არის გლობალური ატრიბუტები, რომლებიც გამოიყენება ყველა ელემენტისათვის:
                    
                    accesskey: განსაზღვრავს სწრაფ კლავიშს ელემენტისთვის
                    
                    class: ელემენტს ანიჭებს CSS-ის კლასს 
                    
                    contenteditable: განსაზღვრავს, რედაქტირებადია თუ არა ელემენტი
                    
                    contextmenu: განსაზღვრავს ელემენტის კონტექსტურ მენიუს,რომელიც გაიხსნება ელემენტზე მაუსის მარჯვენა კლავიშის დაჭერისას
                    
                    dir: განსაზღვრავს ტექსტის მიმართულებას ელემენტში
                    
                    draggable: განსაზღვრავს, შეიძლება თუ არა ელემენტის გადათრევა
                    
                    dropzone: განსაზღვრავს, კოპირდება თუ არა გადასატანი მონაცემები ელემენტზე გადათრევისას
                    
                    hidden: მალავს ელემენტს
                    
                    id: ელემენტის უნიკალური იდენტიფიკატორი. ვებგვერდზე იდენტიფიკატორი არ უნდა მეორდებოდეს
                    
                    lang: განსაზღვრავს ელემენტის ენას
                    
                    spellcheck: განსაზღვრავს, იქნება თუ არა მართლწერის შემოწმება გამოყენებული ელემენტის მიმართ
                    
                    style: განსაზღვრავს ელემენტის სტილს
                    
                    tabindex: განსაზღვრავს თანმიმდევრობას, რომლითაც მოხდება გადართვა ელემენტიდან ელემენტზე TAB კლავიშით
                    
                    title: ელემენტის დამატებითი აღწერა
                    
                    translate: განსაზღვრავს, უნდა ითარგმნოს თუ არა ელემენტის შინაარსი
                    
                    სამომხმარებლო ატრიბუტები
                    
                    წინა ვერსიებისგან განსხვავებით, HTML5-ში დაემატა სამომხმარებლო ატრიბუტები (custom attributes). ახლა უკვე ვებგვერდის შემქმნელს შეუძლია დაამატოს ნებისმიერი პარამეტრი, რომელსაც წინსართად უნდა ჰქონდეს data. მაგალითად:
                    
                    <input type="button" value="დააჭირეთ" data-color="red">
                    
                    აქ ელემენტზე დამატებულია სამომხმარებლო ატრიბუტი data-color, რომელსაც აქვს მნიშვნელობა red .
                    
                    ერთმაგი და ორმაგი ბრჭყალები
                    
                    ატრიბუტების მნიშვნელობის განსაზღვრისას შეიძლება გამოყენებულ იქნეს როგორც ერთმაგი, ისევე ორმაგი ბრჭყალები, თუმცა უფრო ხშირად გამოიყენება ორმაგი ბრჭყალები. ერთმაგი ბრჭყალები ძირითადად გამოიყენება იმ შემთხვევაში, როცა ატრიბუტის მნიშვნელობა თვითონ შეიცავს ბრჭყალებს. მაგალითად:
                    
                    <input type="button" value='ღილაკი "გამარჯობა, მსოფლიო"'>`
                },  {
                    title:"HTML5-ის დოკუმენტის შექმნა",
                    data:`ელემენტები წარმოადგენენ აგურებს, რომლებისგანაც შედგება html5-ის დოკუმენტი. დოკუმენტის შესაქმნელად საჭიროა შევქმნათ ტექსტური ფაილი და გაფართოება შევცვალოთ .html-ზე. შევქმნათ ფაილი და დავარქვათ index.html. შემდეგ გავხსნათ ეს ფაილი ნებისმიერი ტექსტური რედაქტორით და დავამატოთ შემდეგი ტექსტი:

                    <!DOCTYPE html>
                    <html>
                        
                    </html>
                    HTML5-ის დოკუმენტის შესაქმნელად პირველ რიგში საჭიროა 2 ელემენტი: DOCTYPE და html. ელემენტი doctype ანუ Document Type Declaration ამცნობს ბრაუზერს დოკუმენტის ტიპს, ჩვენს შემთხვევაში დოკუმენტის ტიპია html, რაც იმას ნიშნავს, რომ გამოიყენება HTML5 და არა რომელიმე წინა ვერსია. ხოლო html საწყის და საბოლოო ტეგებს შორის მოქცეული იქნება მთელი დოკუმენტი. html ელემენტის შიგნით დავამატოთ ორი ახალი ელემენტი: head და body. ელემენტი head შეიცავს ვებგვერდის მეტამონაცემებს: გვერდის სათაური, კოდირების ტიპი, და ა.შ., ასევე მიმართვებს რესურსებისადმი: სტილები, სკრიპტები, თუ ისინი გამოიყენება ვებ-გვერდზე. ელემენტი body კი შეიცავს ვებგვერდის მთელ შინაარსს.
                    
                    მოდით, შევცვალოთ index.html ფაილის შიგთავსი შემდეგი სახით:
                    
                    <!DOCTYPE html>
                    <html>
                        <head>
                            <meta charset="utf-8">
                            <title>HTML5-ის დოკუმენტი</title>
                        </head>
                        <body>
                            <div>HTML5-ის დოკუმენტის ტექსტი</div>
                        </body>
                    </html>
                    ელემენტში head გვაქვს ორი ელემენტი:
                    
                    ელემენტი title წარმოადგენს ვებგვერდის სათაურს
                    ელემენტი meta წარმოადგენს გვერდის მეტაინფორმაციას. ჩვენს შემთხვევაში ატრიბუტი charset="utf-8" უჩვენებს, რომ გვერდის კოდირება არის utf-8. ქართული ნაწერის კორექტულად გამოსაჩენად უნდა მივუთითოთ ეს კოდირება.
                    ელემენტ body-ის შიგნით გვაქვს მხოლოდ ერთი ელემენტი div, რომელიც განსაზღვრავს ცალკე ბლოკს. შიგნით უბრალო ტექსტია.
                    
                    შევინახოთ ფაილი და გავუშვათ ბრაუზერში:
                    
                    HTML5-ის დოკუმენტი
                    
                    ამგვარად, ჩვენ შევქმენით HTML5-ის დოკუმენტი, რომელსაც სათაურად აქვს "HTML5-ის დოკუმენტი" და ბრაუზერში ჩანართზე სწორედ ეს წარწერაა, ბრაუზერის ძირითად ველში კი ჩანს ის ტექსტი, რომელიც ჩავწერეთ body -ის div ელემენტში.`
                },  {
                    title:"HTML5-ის სინტაქსის სტილები",
                    data:`HTML5-ის დოკუმენტის შექმნისას შეიძლება გამოვიყენოთ ორი განსხვავებული სტილი: HTML და XML.

                    სტილი HTML ითვალისწინებს შემდეგ პრინციპებს:
                    
                    ელემენტს შეიძლება არ ჰქონდეს საწყისი და საბოლოო ტეგები
                    ელემენტს შეიძლება არ ჰქონდეს საბოლოო ტეგი
                    მხოლოდ ცარიელი ტეგები (მაგალითად br,img,link) შეიძლება დაიხუროს სლეშის მეშვეობით />
                    ტეგების და ატრიბუტების რეგისტრს არა აქვს მნიშვნელობა
                    ატრიბუტების მნიშვნელობები შეიძლება არ მოვაქციოთ ბრჭყალებში
                    ზოგიერთ ატრიბუტს შეიძლება არ ჰქონდეს მნიშვნელობა (checked, disabled)
                    სპეციალური სიმბოლოების ეკრანირება არ ხდება
                    დოკუმენტს უნდა ჰქონდეს ელემენტი DOCTYPE
                    ეს არის ე.წ. დაშვებული სტილი, რომელიც გარკვეულწილად ლოიალურია წესების მიმართ დოკუმენტის შექმნისას.
                    
                    HTML5 დოკუმენტი ასევე შეიძლება იყოს აღწერილი XML სინტაქსის მეშვეობით. ასეთ სტილს ასევე უწოდებენ XHTML. ის გამოიყენება, თუ დოკუმენტის თავში content type -ს აქვს მნიშვნელობა application/xml+xhtml. ამ სტილისათვის დამახასიათებელია შემდეგი წესები:
                    
                    ყველა ელემენტს უნდა ჰქონდეს საწყისი ტეგი
                    არაცარიელ ტეგებს ასევე უნდა ჰქონდეთ საბოლოო ტეგი
                    ნებისმიერი ელემენტის დახურვა შესაძლებელია სლეშით />
                    ტეგების და ატრიბუტების სახელები მგრძნობიარეა რეგისტრის მიმართ, როგორც წესი, იწერება დაბალ რეგისტრში
                    ატრიბუტების მნიშვნელობები უნდა იყოს მოქცეული ბრჭყალებში
                    არ დაიშვება ატრიბუტები მნიშვნელობის გარეშე (checked="checked" უბრალოდ checked-ის ნაცვლად)
                    უნდა მოხდეს სპეციალური სიმბოლოების ეკრანირება
                    შევადაროთ ეს ორი სინტაქსის სტილი. HTML5:
                    
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset=utf-8>
                        <title>სათაური</title>
                    </head>
                    <body>
                        <p>HTML5-ის დოკუმენტის ტექსტი<br>
                        <input type=button value=დააჭირეთ>
                    </body>
                    </html>
                    იგივე მაგალითი XHTML სტილში:
                    
                    <!doctype html>
                    <html xmlns="http://www.w3.org/1999/xhtml">
                    <head>
                        <meta charset="utf-8">
                        <title>სათაური</title>
                        </head>
                    <body>
                        <p>HTML5-ის დოკუმენტის ტექსტი<br />
                        <input type="button" value="დააჭირეთ" /></p>
                    </body>
                    </html>
                    XHTML სტილის გამოყენებისას ასევე უნდა მივუთითოთ დოკუმენტის სახელების არე <html xmlns="http://www.w3.org/1999/xhtml">.
                    
                    კონკრეტული სტილის არჩევა პროგრამისტის ან ვებდიზაინერის სურვილზეა დამოკიდებული. ხშირად გამოიყენება შერეული სტილი, როცა წესები აღბულია როგორც ერთი, ასევე მეორე სტილისგან. ამასთან, საჭიროა გავითვალისწინოით, რომ ელემენტისთვის საწყისი და საბოლოო ტეგების არსებობა ამცირებს იმის ალბათობას, რომ ელემენტი არასწორად იქნება ინტერპრეტირებული ბრაუზერის მიერ. ასევე, ატრიბუტის მნიშვნელობების ბრჭყალებში ჩასმით თავს დავიზღვევთ მოსალოდნელი შეცდომებისაგან. მაგალითად, ატრიბუტმა კლასმა შეიძლება ერთდროულად რამდენიმე მნიშვნელობა მიიღოს: <div class="navmenu bigdesctop">. თუ მნიშვნელობას არ ჩავსვამთ ბრჭყალებში, ბრაუზერი class-ის მნიშვნელობად მიიღებს მხოლოდ navmenu-ს, ხოლო bigdesctop-ს ჩათვლის სხვა ატრიბუტად, რის გამოც ელემენტი არასწორად აისახება ბრაუზერში.
                    
                    იმის შესამოწმებლად, თუ რამდენად სწორადაა შედგენილი html დოკუმენტი, შეგვიძლია ვისარგებლოთ ვალიდატორით: https://validator.w3.org.`
                    
                },
            ]
        },
        {
          title:"თავი 2. HTML5-ის ელემენტები",  
          content:[
              {
                  title:"ელემენტი head  და ვებგვერდის მეტამონაცემები",
                  data:`როგორც წესი, html დოკუმენტის ერთ-ერთ უმნიშვნელოვანეს ელემენტს წარმოადგენს head, რომლის დანიშნულებაც მდგომარეობს ვებ-გვერდის მეტამონაცემების და თანმდევი ინფორმაციის განსაზღვრაში. მეტამონაცემები შეიცავენ ინფორმაციას ვებ-გვერდის შესახებ.

                  სათაური
                  
                  სათაურის მისათითებლად გამოიყენება ელემენტი title:
                  
                  <title>ვებ-გვერდის სათაური</title>
                  
                  ელემენტი base
                  
                  ელემენტი base განსაზღვრავს ვებ-გვერდის საბაზისო მისამართს, რომლის მიმართაც განისაზღვრება გვერდზე გამოყენებული სხვა მისამართები:
                  
                  <!doctype html>
                  <head>
                      <base href="content/">
                      <meta charset="utf-8">
                      <title>ვებ-გვერდის სათაური</title>
                  </head>
                  <body>
                      <a href="newpage.html">ახალ გვერდზე გადასვლა</a>
                  </body>
                  </html>
                  მიუხედავად იმისა, რომ ბმულს "ახალ გვერდზე გადასვლა" მისამართში უწერია "newpage.html", ფაქტიური მისამართი იქნება "content/newpage.html". ანუ ვებ-გვერდის საქაღალდეში უნდა იყოს ქვესაქაღალდე content და მასში ფაილი newpage.html.
                  
                  შეიძლება base ელემენტში მივუთითოთ სრული მისამართიც:
                  
                  <base href="http://microsoft.com/">
                  
                  ამ შემთხვევაში ბმული გადაგვიყვანს მისამართზე "http://microsoft.com/newpage.html".
                  ელემენტი meta
                  ელემენტი meta განსაზღვრავს ვებგვერდის მეტამონაცემებს.
                  
                  იმისათვის, რომ უნიკოდის ტექსტის შემცველი გვერდები კორექტულად გამოჩნდეს ბრაუზერში, აუცილებელია მივუთითოთ კოდირება utf-8:
                  
                  <meta charset="utf-8">
                  
                  ამასთან, თვითონ დოკუმენტის კოდირებაც უნდა ემთხვეოდეს meta კოდირებას.
                  ელემენტს meta ასევე აქვს 2 ატრიბუტი: name და content. name არის ატრიბუტის სახელი, content - ატრიბუტის მნიშვნელობა.
                  
                  HTML დოკუმენტში არის 5 ტიპის მეტამონაცემები:
                  
                  application name: ვებ-აპლიკაციის სახელი, რომლის ნაწილიცაა ეს დოკუმენტი
                  
                  author: დოკუმენტის ავტორი
                  
                  description: დოკუმენტის მოკლე აღწერა
                  
                  generator: პროგრამის სახელი, რომელშიც დაგენერირდა დოკუმენტი
                  
                  keywords: საკვანძო სიტყვები (გამოიყენება საძიებო სისტემების მიერ ძებნისთვის)
                  
                  უნდა აღინიშნოს, რომ მეტად მნიშვნელოვანი ატრიბუტია description. მის მნიშვნელობას საძიებო სისტემები ხშირად იყენებენ, როგორც ანოტაციას ვებგვერდისთვის.
                  
                  დავამატოთ დოკუმენტში რამდენიმე meta ელემენტი:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <base href="content/">
                          <title>ვებგვერდის სათაური</title>
                          <meta name="description" content="ჩემი პირველი HTML5 დოკუმენტი">
                          <meta name="author" content="ავტორი">
                      </head>
                      <body>
                          <a href="newpage.html">HTML5 დოკუმენტის შინაარსი</a>
                      </body>
                  </html>`
              },
              {
                title:"დაჯგუფების ელემენტები",
                data:`HTML-ში არის რიგი ელემენტებისა, რომლებიც განკუთვნილია ვებგვერდის შიგთავსის (content) დასაჯგუფებლად.

                ელემენტი div
                
                ელემენტი div გამოიყენება ვებგვერდის შიგთავსის სტრუქტურულად დაჯგუფებისთვის, ცალ-ცალკე ბლოკებში მოსაქცევად. div ქმნის ბლოკს, რომელიც ბრაუზერის მთელ სიგანეზე ვრცელდება (თუ სხვა რამეს არ მივუთითებთ). div-ის მომდევნო ელემენტი გადადის ახალ სტრიქონზე. მაგალითად:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <base href="content/">
                        <title>ვებგვერდის სათაური</title>
                        <meta name="description" content="ჩემი პირველი HTML5 დოკუმენტი">
                        <meta name="author" content="ავტორი">
                    </head>
                    <body>
                        <div>დოკუმენტის სათაური</div>
                        <div>დოკუმენტის ტექსტი</div>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                პარაგრაფები
                
                პარაგრაფები იქმნება <p> და </p> ტეგების მეშვეობით. თითოეული პარაგრაფი იწყება ახალი სტრიქონიდან.მაგალითად:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <base href="content/">
                        <title>ვებგვერდის სათაური</title>
                        <meta name="description" content="ჩემი პირველი HTML5 დოკუმენტი">
                        <meta name="author" content="ავტორი">
                    </head>
                    <body>
                        <div>დოკუმენტის სათაური</div>
                        <div>
                            <p>პირველი პარაგრაფი</p>
                            <p>მეორე პარაგრაფი</p>
                        </div>
                    </body>
                </html>
                HTML5-ის დოკუმენტი
                თუ ერთი პარაგრაფის ფარგლებში გვინდა სტრიქონის გადატანა, უნდა გამოვიყენოთ ელემენტი <br>:
                <p>პირველი სტრიქონი.<br />მეორე სტრიქონი.</p>
                
                ელემენტი pre
                ელემენტ pre-ს გამოაქვს წინასწარ დაფორმატებული ტექსტი:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <base href="content/">
                        <title>ვებგვერდის სათაური</title>
                        <meta name="description" content="ჩემი პირველი HTML5 დოკუმენტი">
                        <meta name="author" content="ავტორი">
                    </head>
                    <body>
                        <pre>
                            პირველი სტრიქონი
                            მეორე სტრიქონი
                            მესამე სტრიქონი
                        </pre>
                    </body>
                </html>
                 
                HTML5-ის დოკუმენტი
                
                ელემენტი span
                ელემენტი span-თ ხდება გარკვეული ტექსტის შემოგარსვა მთელ სიგრძეზე და მის სტილიზაციას ემსახურება. განსხვავებით div ელემენტისაგან და პარაგრაფისგან, span-ს არ გადააქვს ტექსტი ახალ სტრიქონზე:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5-ის დოკუმენტი</title>
                    </head>
                    <body>
                        <div>HTML5-ის დოკუმენტის სათაური</div>
                        <div>
                            <p><span style="color:red;">პირველი</span> პარაგრაფი</p>
                            <p><span>მეორე</span> პარაგრაფი</p>
                        </div>
                    </body>
                </html>
                HTML5-ის დოკუმენტი
                აღსანიშნავია, რომ თვითონ span არაფერს არ აკეთებს, მეორე პარაგრაფში იგი არ ცვლის ტექსტს არანაირად. პირველ პარაგრაფში span-ს გააჩნია ატრიბუტი style="color:red;", რომელიც ცვლის ტექსტის სტილს (ცვლის ფერს).
                თუ div და p არის ბლოკის ტიპის ელემენტები და ისინი შეიძლება შეიცავდნენ ნებისმიერ ელემენტებს, span არის სტრიქონული ტიპის. ამასთან არაა რეკომენდირებული span-ის შიგნით მოვაქციოთ ბლოკური ელემენტები.`
            },
            {
                title:"სათაურები",
                data:`ელემენტები <h1>, <h2>, <h3>, <h4>, <h5> и <h6> ემსახურება სხვადასხვა დონის სათაურების შექმნას:

                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>HTML5 -ის სათაურები</title>
                </head>
                <body>
                    <h1>პირველი დონის სათაური</h1>
                    <h2>მეორე დონის სათაური</h2>
                    <h3>მესამე დონის სათაური</h3>
                    <h4>მეოთხე დონის სათაური</h4>
                    <h5>მეხუთე დონის სათაური</h5>
                    <h6>მეექვსე დონის სათაური</h6>
                </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                სათაურებს გააჩნია გამუქებული შრიფტი და შრიფტის ზომა ყველაზე დიდი <h1> -დან ყველაზე პატარა <h6>-მდე.
                
                სათაურების დამატებისას უნდა გავითვალისწინოთ, რომ ვებგვერდს უნდა ჰქონდეს მხოლოდ ერთი პირველი დონის სათაური <h1>. ის ასრულებს ვებგვერდის ძირითადი სათაურის როლს.`
            },
            {
                title:"ტექსტის ფორმატირება",
                data:`html-ის მთელი რიგი ელემენტები განკუთვნილია ტექსტის ფორმატირებისთვის, მაგალითად გასამუქებლად, ხაზგასასმელად და ა. შ. განვიხილოთ ეს ელემენტები:

                <b>: ტექსტის გამუქება
                <del>: ტექსტის გადახაზვა 
                <i>: ტექსტის დახრა
                <em>: ტექსტის დახრა, ოღონდ <i>-საგან განსხვავებით, ატარებს ლოგიკურ ხასიათს და ხაზს უსვამს მის მნიშვნელობას
                <s>: ტექსტის გადახაზვა
                <small> ტექსტის დაპატარავება
                <strong> ტექსტის გამუქება, ოღონდ <b>-საგან განსხვავებით, ატარებს ლოგიკურ ხასიათს და ხაზს უსვამს მის მნიშვნელობას 
                <sub>: ტექსტის ჩამოწევა სტრიქონის ქვემოთ
                <sup>: ტექსტის აწევა სტრიქონის ზევით
                <u>: ტექსტის ხაზგასმა
                <ins>: ჩასმული (დამატებული) ტექსტი
                <mark>: ტექსტის გამოყოფა ფერით. ხაზს უსვამს მის მნიშვნელობას
                გამოვიყენოთ ეს ელემენტები:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ტექსტის ფორმატირება HTML5-ში</title>
                    </head>
                    <body>
                        <p>ფორმატირება <mark>HTML5</mark>-ში</p>
                        <p>ეს <b>გამუქებული</b> ტექსტია</p>
                        <p>ეს <strong>მნიშვნელოვანი</strong> ტექსტია</p>
                        <p>ეს <del>გადახაზული</del> ტექსტია</p>
                        <p>ეს <s>გაუქმებული</s> ტექსტია</p>
                        <p>ეს <em>მნიშვნელოვანი</em> ტექსტია</p>
                        <p>ეს ტექსტი <i>დახრილია</i> </p>
                        <p>ეს <ins>დამატებული</ins> ტექსტია</p>
                        <p>ეს <u>ხაზგასმული</u> ტექსტია</p>
                        <p>X<sub>i</sub> = Y<sup><small>2</small></sup> + Z<sup><small>2</small></sup></p>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი`
            },
            {
                title:"სურათებთან მუშაობა",
                data:`სურათების გამოსატანად HTML-ში გამოიყენება ელემენტი <img>, რომელსაც გააჩნია ორი მნიშვნელოვანი ატრიბუტი: 

                src: სურათის მისამართი. ეს შეიძლება იყოს ფარდობითი ან აბსოლუტური მისამართი ფაილურ სისტემაში ან მისამართი ინტერნეტში
                alt: სურათის ტექსტური აღწერა. თუ რაღაც მიზეზით ვერ ხერხდება სურათის გამოტანა ეკრანზე, მის ნაცვლად გამოჩნდება alt ატრიბუტში მითითებული მნიშვნელობა
                alt-ს კიდევ ერთი დანიშნულება აქვს. საძიებო სისტემებში სურათის ინდექსირება ხდება სწორედ მისი მნიშვნელობით.
                
                იგივე საქაღალდეში, სადაც index.html-ია დავდოთ რამე სურათი და გამოვიტანოთ ის ვებგვერდზე:
                
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>სურათი HTML5-ში</title>
                </head>
                <body>
                    <img src="kanioni.jpg" alt="martvilis kanioni">
                </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                სტილებისა და ფორმატირების ელემენტების გამოყენებით შესაძლებელია სურათისა და ტექსტის კომბინირება. მაგალითად:
                
                 
                
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>სურათი HTML5-ში</title>
                </head>
                <body>
                    <div>
                        <img src="kanioni.jpg" alt="მარტვილის კანიონი" style="float:left; margin-right:10px;" />
                        <h1>Lorem Ipsum</h1>
                        <b>Lorem Ipsum</b> is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry....
                    </div>
                </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                სურათისთვის მნიშვნელოვანი ატრიბუტებია ასევე ზომები width და height. მათი მითითების გარეშე სურათი იღებს ორიგინალურ ზომებს, ხოლო მითითების შემთხვევაში - მითითებულს. შესაძლებელია მივუთითოთ მხოლოდ ერთ-ერთი (სიგანე ან სიმაღლე), მეორე პროპორციულად მიენიჭება ავტომატურად:
                
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>სურათი HTML5-ში</title>
                </head>
                <body>
                    <img src="kanioni.jpg" alt="martvilis kanioni" width="250px" height="165">
                </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი`
            },
            {
                title:"სიები",
                data:`სიების შესაქმნელად HTML5-ში გამოიყენება ელემენტები <ol> (დანომრილი სია) და <ul> (უნომრო სია):

                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>სიები HTML5-ში</title>
                </head>
                <body>
                    <h2>დანომრილი სია</h2>
                    <ol>
                        <li>iPhone 6S</li>
                        <li>Galaxy S7</li>
                        <li>Nexus 5X</li>
                        <li>Lumia 950</li>
                    </ol>
                    <h2>უნომრო სია</h2>
                    <ul>
                        <li>iPhone 6S</li>
                        <li>Galaxy S7</li>
                        <li>Nexus 5X</li>
                        <li>Lumia 950</li>
                    </ul>
                </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                თუ სპეციალურად არ მივუთითებთ, დანომრილ სიაში ნუმერაცია ხორციელდება ნატურალური რიცხვებით 1-დან, სოლო უნომრო სიაში - შავი მუქი წერტილით. საჭიროების შემთხვევაში ჩვენ შეგვიძლია შევცვალოთ ნუმერაცია სტილის list-style-type მეშვეობით. ჩამოვთვალოთ ძირითადი და ხშირად გამოყენებული სტილები:
                
                დანომრილი სიებისთვის:
                
                decimal: რიცხვები, ათვლა იწყება 1-დან
                decimal-leading-zero: რიცხვები, რომელთაც წინ უძღვის 0, მაგალითად 01,02,03,...98,99
                lower-roman: დაბალი რეგისტრის რომაული რიცხვები, მაგალითად, i, ii, iii, iv, v
                upper-roman: მაღალი რეგისტრის რომაული რიცხვები, მაგალითად, I, II, III, IV, V…
                lower-alpha: დაბალი რეგისტრის ლათინური ასოები,მაგალითად, a, b, c..., z
                upper-alpha: მაღალი რეგისტრის ლათინური ასოები,მაგალითად, A, B, C, … Z
                georgian: ქართული ანბანის ასოები, ა,ბ,გ,დ,...ჰ
                დანომრილ სიებს start ატრიბუტის მეშვეობით შეიძლება მივუთითოთ, თუ საიდან დაიწყება ნუმერაცია. მაგალითად:
                
                <h2>list-style-type = decimal</h2>
                    <ol style="list-style-type:decimal;" start="3">
                        <li>iPhone 6S</li>
                        <li>Galaxy S7</li>
                        <li>Nexus 5X</li>
                        <li>Lumia 950</li>
                    </ol>
                    <h2>list-style-type = upper-roman</h2>
                    <ol style="list-style-type:upper-roman;" start="10">
                        <li>iPhone 6S Plus</li>
                        <li>Galaxy S7 Edge</li>
                        <li>Nexus 6P</li>
                        <li>Lumia 950 XL</li>
                    </ol>
                    <h2>list-style-type = lower-alpha</h2>
                    <ol style="list-style-type:lower-alpha;">
                        <li>LG G 5</li>
                        <li>Huawei P8</li>
                        <li>Asus ZenFone 2</li>
                    </ol>
                    <h2>list-style-type = georgian</h2>
                    <ol style="list-style-type:georgian;">
                        <li>ერთი</li>
                        <li>ორი</li>
                        <li>სამი</li>
                        <li>ოთხი</li>
                        <li>ხუთი</li>
                    </ol>
                 
                
                HTML5-ის დოკუმენტი
                
                უნომრო სიებისთვის list-style-type-მა შეიძლება მიიღოს შემდეგი მნიშვნელობები:
                
                disk: შავი წრე
                circle: ცარიელი წრე
                square: შავი კვადრატი
                მაგალითად:
                
                    <h2>list-style-type = disk</h2>
                    <ul style="list-style-type:disk;">
                        <li>iPhone 6S</li>
                        <li>Galaxy S7</li>
                        <li>Nexus 5X</li>
                        <li>Lumia 950</li>
                    </ul>
                    <h2>list-style-type = circle</h2>
                    <ul style="list-style-type:circle;">
                        <li>iPhone 6S Plus</li>
                        <li>Galaxy S7 Edge</li>
                        <li>Nexus 6P</li>
                        <li>Lumia 950 XL</li>
                    </ul>
                    <h2>list-style-type = square</h2>
                    <ul style="list-style-type:square;">
                        <li>LG G 5</li>
                        <li>Huawei P8</li>
                        <li>Asus ZenFone 2</li>
                    </ul>
                 
                
                HTML5-ის დოკუმენტი
                
                კიდევ ერთ საინტერესო შესაძლებლობას სიებისთვის გვაძლევს სტილი list-style-image. მისი მეშვეობით შესაძლებელია სიის გვერდით გამოვიტანოთ სურათი. მაგალითად:
                
                <ul style="list-style-image:url(phone.jpeg);">
                        <li>iPhone 6S</li>
                        <li>Galaxy S7</li>
                        <li>Nexus 5X</li>
                        <li>Lumia 950</li>
                    </ul>
                 
                
                HTML5-ის დოკუმენტი
                
                ჰორიზონტალური სია
                
                ჰორიზონტალური სიის მისაღებად სიის ყველა ელემენტისთვის უნდა დავაყენოთ სტილი display:inline:
                
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>სიები HTML5-ში</title>
                    <style>
                        ul#menu li {
                            display:inline;
                        }
                    </style>
                </head>
                <body>
                    <ul id="menu">
                        <li>|მთავარი|</li>
                        <li>|ბლოგი|</li>
                        <li>|ფორუმი|</li>
                        <li>|საიტის შესახებ|</li>
                    </ul>
                </body>
                </body
                </html>`
            },
            {
                title:"ელემენტი details",
                data:`ელემენტი details საშუალებას იძლევა შეიქმნას ჩამოშლადი ბლოკი, რომელიც თავდაპირველად დამალულია. ის შეიცავს ელემენტს summary, რომელიც ყოველთვის ჩანს, როგორც სათაური, ხოლო დანარჩენი ნაწილი გამოჩნდება ისარზე ან სათაურზე დაჭერის შემთხვევაში. მაგალითად:

                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ელემენტი details HTML5-ში</title>
                    </head>
                    <body>
                        <details>
                            <summary>2015 წლის ფლაგმანები</summary>
                            <ul>
                                <li>iPhone 6S Plus</li>
                                <li>Nexus 6P</li>
                                <li>Galaxy S6 Edge</li>
                                <li>Lumia 950 XL</li>
                            </ul>
                        </details>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                სათურზე ან ისარზე დაჭერისას გაიშლება დამალული ნაწილი:
                
                HTML5-ის დოკუმენტი
                
                უნდა გავითვალისწინოთ, რომ ამ დროისთვის ამ ელემენტის მხარდაჭერა ყველა ბრაუზერს არა აქვს.`
            },
            {
                title:"განმარტებების სია",
                data:`განმარტებების სია (definition list) არის ისეთი სია, რომელიც შეიცავს ტერმინს და მის განმარტებას. ასეთი წყვილი - ტერმინი-განმარტება სიაში შეიძლება იყოს ბევრი. განმარტებების სიის შესაქმნელად გამოიყენება ტეგი <dl></dl>. ამ ტეგების შიგნით თავსდება სიის ელემენტები. თითოეული ელემენტი შედგება ტერმინისგან <dt></dt> (dt - "definition term") და განმარტებისგან <dd></dd>(dd- "definition description"). მაგალითად:

                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>განმარტებების სია HTML5-ში</title>
                    </head>
                    <body>
                        <dl>
                            <dt>რასობრივი დისკრიმინაცია</dt>
                            <dd>დანაშაული, რომელსაც პირი სჩადის ეროვნული ან რასობრივი მტრობის ან განხეთქილების
                                    ჩამოგდების, ეროვნული პატივისა და ღირსების დამცირების მიზნით.</dd>
                            <dt>რეაბილიტაცია</dt>
                            <dd>უკანონოდ ან დაუსაბუთებლად მსჯავრდებული ან ბრალდებული პირისათვის უფლებების
                                    აღდგენა, როდესაც დადგინდება მისი უდანაშაულობა გამამართლებელი განაჩენით, ან მის
                                    მიმართ გამოტანილი იქნება დადგენილება (განჩინება) სისხლისსამართლებრივი დევნის
                                    შეწყვეტის თაობაზე.</dd>
                            <dt>რესტიტუცია</dt>
                            <dd>პირვანდელი მდგომარეობის აღდგენა. სახელშეკრულებო ურთიერთობებში რესტიტუცია ხდება
                                    ხელშეკრულებიდან მხარეთა გასვლისას იმ დროს, რათა ისინი ამ ხელშეკრულების დადებამდე
                                    არსებულ ვითარებას დაუბრუნდნენ.</dd>
                        </dl>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი`
            },
            {
                title:"ცხრილები",
                data:`ცხრილების შესაქმნელად გამოიყენება ელემენტი table. თითოეული ცხრილი <table> და </table> ტეგებს შორის შეიცავს სტრიქონებს tr ელემენტის სახით, რომელიც თავის მხრივ შეიცავს უჯრებს td ელემენტის სახით.

                შევქმნათ მარტივი ცხრილი:
                
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>ცხრილები HTML5-ში</title>
                </head>
                <body>
                    <table>
                        <tr>
                            <td>მოდელი</td>
                            <td>კომპანია</td>
                            <td>ფასი</td>
                        </tr>
                        <tr>
                            <td>Nexus 6P</td>
                            <td>Huawei</td>
                            <td>700</td>
                        </tr>
                        <tr>
                            <td>iPhone 6S PLus</td>
                            <td>Apple</td>
                            <td>650</td>
                        </tr>
                        <tr>
                            <td>Lumia 950 XL</td>
                            <td>Microsoft</td>
                            <td>450</td>
                        </tr>
                    </table>
                </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                ცხრილი შედგება სამი სვეტისგან და ოთხი სტრიქონიდან. პირველი სტრიქონი ასრულებს სათაურის მოვალეობას. თუმცა html5-ში გათვალისწინებულია ელემენტები, რომელთა საშუალებითაც შესაძლებელია ცხრილის სათაურის, სვეტების სათაურის, ცხრილის ტანისა და ქვედა ნაწილის გამოყოფა. ამისთვის გათვალისწინებულია ელემენტები: caption, thead,tbody,tfoot. შევცვალოთ ცხრილი შემდეგნაირად:
                
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>ცხრილები HTML5-ში</title>
                </head>
                <body>
                    <table>
                        <caption><b>2015 წლის პოპულარული სმარტფონები</b></caption>
                        <thead>
                        <tr>
                            <th>მოდელი</th>
                            <th>კომპანია</th>
                            <th>ფასი</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td>Nexus 6P</td>
                            <td>Huawei</td>
                            <td>700</td>
                        </tr>
                        <tr>
                            <td>iPhone 6S PLus</td>
                            <td>Apple</td>
                            <td>650</td>
                        </tr>
                        <tr>
                            <td>Lumia 950 XL</td>
                            <td>Microsoft</td>
                            <td>450</td>
                        </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="3">* 12 სექტემბრის მდგომარეობით</th>
                            </tr>
                        </tfoot>
                    </table>
                </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                სათურის სტრიქონი მოქცეულია thead ელემენტის შიგნით. სათაურის უჯრებისთვის გამოიყენება არა td, არამედ th. იგი სათურის ტექსტს ამუქებს. ცხრილის ქვედა ნაწილი - ფუტერი შეიცავს მხოლოდ ერთ უჯრას. სტრიქონის რამდენიმე უჯრის გასაერთიანებლად გამოიყენება ატრიბუტი colspan. მისი მნიშვნელობა "3" მიუთითებს, რომ გაერთიანებულია 3 უჯრა. ანალოგიურად, სვეტში რამდენიმე უჯრის გასაერთიანებლად გამოიყენება ატრიბუტი rowspan. მაგალითად:
                
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>ცხრილები HTML5-ში</title>
                    <style>
                        td {
                            width: 60px;
                            height: 60px;
                            border: solid 1px silver;
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <table>
                        <tr>
                            <td rowspan="2" style="background-color:green;">1</td>
                            <td>2</td>
                            <td>3</td>
                        </tr>
                        <tr>
                            <td>4</td>
                            <td>5</td>
                        </tr>
                        <tr>
                            <td>6</td>
                            <td colspan="2" style="background-color:red;">7</td>
                        </tr>
                    </table>
                </body>
                </html>`
            },
            {
                title:"ბმულები",
                data:`ბმულები, რომლებიც წარმოდგენილია <a></a> ელემენტის სახით ასრულებენ მნიშვნელოვან როლს: ისინი უზრუნველყოფენ ნავიგაციას ცალკეულ დოკუმენტებს შორის. ამ ელემენტს გააჩნია შემდეგი ატრიბუტები:

                href: განსაზღვრავს ბმულის მისამართს
                hreflang: მიუტითებს დოკუმენტის ენას, სადაც გადავყავართ ბმულს
                media: განსაზღვრავს მოწყობილობას, რომლისთვისაცაა განკუთვნილი ბმული
                rel: განსაზღვრავს დამოკიდებულებას მიმდინარე დოკუმენტსა და იმ რესურსს შორის, სადაც გადავყავართ ბმულს
                target: განსაზღვრავს ბმულის გახსნის ადგილს
                type: განსაზღვრავს რესურსის mime-type-ს, სადაც გადავყავართ ბმულს
                ყველაზე მნიშვნელოვანი ატრიბუტია href:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ბმულები</title>
                    </head>
                    <body>
                        <a href="content.html">HTML5-ის სახელმძღვანელო</a>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                აქ გამოყენებულია ფარდობითი მისამართი content.html, ანუ index.html-თან იგივე საქაღალდეში უნდა იყოს ფაილი content.html. ასევე შესაძლებელია ინტერნეტის სრული მისამართის გამოყენებაც.
                
                ნავიგაცია დოკუმენტის შიგნით
                
                ბმულების მეშვეობით შესაძლებელია ნავიგაცია ერთი დოკუმენტის შიგნით ბლოკებს შორის. ამისათვის მისამართად გამოიყენება დიეზი (#), რომელსაც მოსდევს იმ ელემენტის id, სადაც უნდა გადავყავდეთ ბმულს. მაგალითად:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>შიდა ბმულები</title>
                    </head>
                    <body>
                        <a href="#paragraph1">პარაგრაფი 1</a> | <a href="#paragraph2">პარაგრაფი 2</a> | <a href="#paragraph3">პარაგრაფი 3</a>
                        <h2 id="paragraph1">პარაგრაფი 1</h2>
                        <p>პარაგრაფი 1-ის შინაარსი</p>
                        <h2 id="paragraph2">პარაგრაფი 2</h2>
                        <p>პარაგრაფი 2-ის შინაარსი</p>
                        <h2 id="paragraph3">პარაგრაფი 3</h2>
                        <p>პარაგრაფი 3-ის შინაარსი</p>
                    </body>
                </html
                 
                
                HTML5-ის დოკუმენტი
                
                ატრიბუტი target
                
                მითითების გარეშე ბმული იხსნება იმავე ფანჯარაში, რომელშიც იმყოფება მიმდინარე დოკუმენტი. target ატრიბუტის მეშვეობით შესაძლებელია შევცვალოთ ეს ადგილი. იგი ღებულობს შემდეგ მნიშვნელობებს:
                
                _blank: დოკუმენტის გახსნა ბრაუზერის ახალ ფანჯარაში ან ჩანართში
                _self: დოკუმენტის გახსნა იგივე ფრეიმში ან ფანჯარაში
                _parent: დოკუმენტის გახსნა მშობელ ფრეიმში ან ფანჯარაში, თუ ბმული მოთავსებულია შიდა ფრეიმში
                _top: დოკუმენტის გახსნა ბრაუზერის მთელ ფანჯარაში
                framename: დოკუმენტის გახსნა ფრეიმში სახელად framename (ფრეიმის სახელი შეიძლება ნებისმიერი იყოს)
                მაგალითად, ბმულის გასახსნელად ახალ ფანჯარაში უნდა დავწეროთ:
                
                <a href="http://progbook.terasoft.ge/" target="_blank">HTML5-ის სახელმძღვანელო</a>
                
                ბმულების სტილიზაცია
                
                მითითბის გარეშე ბმულს გააჩნია ლურჯი ფერი და ხაზგასმულია. მაუსის დაჭერისას ბმული ხდება აქტიური და ფერი ხდება წითელი. დაჭერისა და ბმულის მისამართზე გადასვლის შემდეგ ბმული იცვლის ფერს, როგორც წესი, ხდება იისფერი. ასეთ სტილიზაციას ბმულს აძლევს ბრაუზერი, მაგრამ სურვილის შემთხვევაში შესაძლებელია შევცვალოთ სტილების მეშვეობით:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ბმულები</title>
                        <style>
                            a:link    {color:blue; text-decoration:none}
                            a:visited {color:green; text-decoration:none}
                            a:hover   {color:red; text-decoration:underline}
                            a:active  {color:yellow; text-decoration:underline}
                        </style>
                    </head>
                    <body>
                        <a href="index.html">HTML5-ის სახელმძღვანელო</a>
                    </body>
                </html>
                აქ განსაზღვრულია ბმულის სტილი სხვადასხვა მდგომარეობაში: 
                
                a:link ბმული ჩვეულებრივ მდგომარეობაში, როცა მაუსი არაა დაჭერილი ან მიმართული ბმულისკენ
                a:visited ბმული, რომელზეც უკვე იყო განხორციელებული გადასვლა
                a:hover ბმულის მდგომარეობა, როცა მაუსი მიმართულია მისკენ
                a:active ბმული მაუსის დაჭერის მომენტში
                სტილი color განსაზღვრავს ფერს, ხოლო text-decoration ხაზგასმას: none - ხაზგასმის გარეშე, underline - ხაზგასმული
                
                სურათი ბმული
                
                თუ მოვათავსებთ <a> ელემენტის შიგნით ელემენტს <img>, მივიღებთ სურათს ბმულით:
                
                    <a href="index.html">
                       <img src="cover.png" alt="HTML tutorial">
                    </a>`
            },
            {
                title:"ელემენტები figure და figcaption",
                data:`ელემენტი figure გამოიყენება ილუსტრაციების, დიაგრამების, სურათების ანოტაციისთვის. ხოლო figcaption შეიცავს სათაურს figure ელემენტის შიგთავსისთვის. 

                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ელემენტი Figure HTML5-ში</title>
                    </head>
                    <body>
                        <div>
                            <p>Lorem ipsum dolor … </p>
                            <figure>
                                <figcaption>მარტვილის კანიონი</figcaption>
                                <img src="kanioni.jpg" alt="მარტვილის კანიონი">
                            </figure>
                            <p>Lorem ipsum dolor … </p>
                        </div>   
                    </body>
                </html
                 
                
                `
            },
            {
                title:"ფრეიმები",
                data:`ფრეიმები საშუალებას გვაძლევს ვებგვერდში ჩავაშენოთ სხვა ვებგვერდი. ამისთვის გამოიყენება ელემენტი iframe.

                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ფრეიმი HTML5-ში</title>
                    </head>
                    <body>
                        <h2>ელემენტი iframe</h2>
                        <iframe src="http://wikipedia.com" width="500" height="300">
                        </iframe>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                ელემენტ iframe გააჩნია შემდეგი ატრიბუტები:
                
                src: ჩასატვირთი ვებგვერდის სრული მისამართი
                width: სიგანე
                height: სიმაღლე
                უნდა აღინიშნოს, რომ ფრეიმებში ყველა საიტის ჩატვირთვა არ შეიძლება, რადგან ზოგიერთი ვებსერვერი კრძალავს საიტების ჩატვირთვას ფრეიმებში.`
            },
          ]
        },
        {
            title:"თავი 3. ფორმებთან მუშაობა",
            content:[
                {
                    title:"ფორმები",
                    data:`ფორმა წარმოადგენს მონაცემთა შეყვანისა და გაგზავნის ერთ-ერთ საშუალებას. ფორმის ყველა ველი თავსდება <form> და </form> ტეგებს შორის. შევქმნათ უმარტივესი ფორმა:

                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ფორმები HTML5-ში</title>
                    </head>
                    <body>
                        <form  method="post" action="http://localhost:8080/login.php">
                            <input name="login"/>
                            <input type="submit" value="შესვლა"/>
                        </form>
                    </body>
                    </html>
                     
                    
                     
                    
                    HTML5-ის დოკუმენტი
                    
                    ფორმას შეიძლება განესაზღვროს შემდეგი ატრიბურები:
                    
                    method: მონაცემების სერვერზე გაგზავნის მეთოდი post და get
                    action: ვებსერვერის მისამართი
                    enctype: გადასაცემი ინფორმაციის ტიპი:
                    application/x-www-form-urlencoded: მონაცემების გადაცემის კოდირება იმ შემთხვევაში, თუ არ მივუთითებთ
                    multipart/form-data: კოდირება ფაილების გასაგზავნად
                    text/plain: უბრალო ტექსტი
                    ზემოთ მოყვანილ მაგალითში ფორმას გააჩნია post მეთოდი, ვებსერვისის მისამართია http://localhost:8080/login.php.
                    
                    როგორც წესი, მითითებულ მისამართზე მუშაობს ვებსერვისი, რომელიც იყენებს რომელიმე სერვისის ტექნოლოგიას(PHP, NodeJS, ASP.NET და სხვა). ახლა ჩვენ არ გავამახვილებთ ყურადღებას სერვერის ტექნოლოგიებზე, არამედ განვიხილავთ მონაცემების გაგზავნის მეთოდებს.
                    
                    ავტოშევსება
                    
                    ხშირად ბრაუზერები იმახსოვრებენ შეყვანილ მონაცემებს და მორიგი შესვლისას ჩნდება ჩამოსაშლელი დამახსოვრებული მონაცემებით:
                    
                    HTML5-ის დოკუმენტი
                    
                    საჭიროების შემთხვევაში შესაძლებელია ავტოშევსების გამორთვა, ამისთვის გამოიყენება ატრიბუტი autocomplete. ღებულობს მნიშვნელობებს on (ავტოშევსება ჩართულია) და off (ავტოშევსება გამორთულია). ეს ატრიბუტი შეიძლება მიეთიტოს როგორც ფორმას, ასევე მის ცალკეულ ელემენტს. ფორმაზე მითითებული ატრიბუტი ვრცელდება ყველა მის ელემენტზე, თუ თვითონ ელემენტს არა აქვს მითითებული იგივე ატრიბუტი განსხვავებული მნიშვნელობით. მაგალითად:
                    
                     
                    
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ფორმები HTML5-ში</title>
                    </head>
                    <body>
                        <form  method="post" autocomplete="off" action="http://localhost:8080/login.php">
                            <input name="login"  autocomplete="on" />
                            <input name="password" />
                            <input type="submit" value="შესვლა"/>
                        </form>
                    </body>
                    </html>
                     
                    
                    მოცემულ მაგალითში ავტოშევსება გამორთულია ყველა ელემენტზე, გარდა პირველისა, რადგან პურველ ელემენტს თვითონ აქვს მითითებული on.
                    
                     `
                },
                {
                  title:"ფორმის ელემენტები",
                  data:`ფორმა შედგება ერთი ან რამდენიმე მონაცემთა შეყვანის ელემენტისგან. შეყვანის ყველაზე გავრცელებულ ელემენტს წარმოადგენს ელემენტი input. ელემენტის რეალურ სახეს განსაზღვრავს ატრიბუტი type. ის ღებულობს შემდეგ მნიშვნელობებს:

                  text: ჩვეულებრივი ტექსტური ველი
                  password: ასევე ტექსტური ველი, ოღონდ შეყვანილი სიმბოლოების ადგილას გამოჩნდება ვარსკვლავი. ეს ველი ძირითადად გამოიყენება პაროლების შესაყვანად
                  radio: რადიოღილაკი ანუ გადამრთველი. რადიოღილაკების ჯგუფიდან შეიძლება მხოლოდ ერთის არჩევა
                  checkbox: ჩამრთველი ელემენტი (ალამი), რომელიც შეიძლება იყოს ჩართულ ან გამორთულ მდგომარეობაში
                  hidden: დამალული ველი
                  submit: ფორმის მონაცემების გაგზავნის ღილაკი
                  color: ფერის შესაყვანი ველი
                  date: თარიღის შესაყვანი ველი
                  datetime: თარიღის და დროის შესაყვანი ველი
                  datetime-local: სასაათო სარტყლის გაუთვალისწინებლად თარიღის და დროის შესაყვანი ველი
                  email: ელექტრონული მისამართის შესაყვანი ველი
                  month: თვისა და წლის შესაყვანი ველი
                  number: რიცხვების შესაყვანი ველი
                  range: გარკვეული დიაპაზონიდან რიცხვების ასარჩევი მცოცავი ველი
                  tel: ტელეფონის ნომრის შესაყვანი ველი
                  time: დროის შესაყვანი ველი
                  week: წლისა და კვირის შესაყვანი ველი
                  url: url მისამართის შესაყვანი ველი
                  file: გასაგზავნი ფაილის ასარჩევი ველი
                  image: ქმნის ღილაკს სურათის ფორმით
                  ელემენტი input-ის გარდა არის კიდევ რამდენიმე ელემენტი, რომლებიც გამოიყენება ფორმებთან მუშაობისას:
                  
                  button: ქმნის ღილაკს
                  select: ჩამოსაშლელი სია
                  label: ქმნის წარწერას, რომელიც გამოისახება შეყვანის ველის გვერდით
                  textarea: მრავალსტრიქონიანი ტექსტური ველი
                  ატრიბუტები name და value
                  
                  შეყვანის ყველა ელემენტს გააჩნია ატრიბუტები name და value. name ატრიბუტის მიხედვით შესაძლებელია ელემენტის იდენტიფიცირება, ხოლო value ანიჭებს ელემენტს მნიშვნელობას. მაგალითად:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ფორმები HTML5-ში</title>
                  </head>
                  <body>
                      <form method="get" action="index.html">
                          <input type="text" name="login" value="Tom"/>
                          <input type="password" name="password"/>
                          <input type="submit" value="შესვლა" />
                      </form>
                  </body>
                  </html>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  შესვლის ღილაკზე დაჭერისას შეიცვლება მისამართის ზოლი:
                  
                  HTML5-ის დოკუმენტი
                  
                  index.html-ის მერე მისამართს დაემატა კითხვის ნიშანი და login=Tom&password=qwerty. ასეთი სახით ხდება ფორმის მონაცემების გაგზავნა სერვერზე, წყვილების "გასაღები"="მნიშვნელობა" სახით, რომლებიც ერთმანეთთან & სიმბოლოთია გადაბმული. ამ მონაცემების მიღების შემდეგ სერვერი ღებულობს ფორმაში შეყვანილ მონაცემებს და აბრუნებს შესაბამის პასუხს.`
              },
              {
                  title:"ღილაკები",
                  data:`ღილაკები წარმოდგენილია ელემენტით button. მას გააჩნია კონფიგურაციის ბევრი შესაძლებლობა. ატრიბუტი type მიხედვით შეგვიძლია შევქმნათ ღილაკის შემდეგი ტიპები:

                  submit: ღილაკი ფორმის მონაცემების გაგზავნისთვის
                  reset: ღილაკი ფორმის მნიშვნელობების გასუფთავებისთვის
                  button: ღილაკი რამე სპეციალური დანიშნულების გარეშე
                  თუ ღილაკი განკუთვნილია მონაცემების გაგზავნისთვის, ანუ თუ მინიჭებული აქვს ატრიბუტი type="submit", შეგვიძლია მივანიჭოთ დამატებითი ატრიბუტები:
                  
                  form: განსაზღვრავს ფორმას, რომელზედაც არის მიმაგრებული ღილაკი
                  formaction: განსაზღვრავს მისამართს, რომელზეც იგზავნება ფორმის მონაცემები. თუ ელემენტს form მინიჭებული აქვს ატრიბუტი action, ხდება მისი ამოცვლა ფორმის formaction-ის მნიშვნელობით
                  formenctype: განსაზღვრავს მონაცემების გაგზავნის ფორმატს. თუ ელემენტს form  მინიჭებული აქვს ატრიბუტი enctype, ხდება მისი ამოცვლა ღილაკის formenctype-ის მნიშვნელობით
                  formmethod: განსაზღვრავს მონაცემების გაგზავნის მეთოდს (post ან get). თუ ელემენტს form მინიჭებული აქვს ატრიბუტი method, ხდება მისი ამოცვლა ღილაკის formmethod-ის მნიშვნელობით
                  მაგალითად, შევქმნათ ფორმა მონაცემთა გაგზავნის და გასუფთავების ღილაკებით:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ფორმები HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <p><input type="text" name="login" /></p>
                          <p><input type="password" name="password" /></p>
                          <p>
                              <button type="submit" formmethod="get" formaction="index.html">გაგზავნა</button>
                              <button type="reset">გასუფთავება</button>
                          </p>
                      </form>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  გარდა ელემენტისა button ღილაკის შექმნა შეიძლება ასევე ელემენტით input , რომლის type ატრიბუტის მნიშვნელობა არის submit, reset an button. მაგალითად:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ფორმები HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <p><input type="text" name="login" /></p>
                          <p><input type="password" name="password" /></p>
                          <p>
                              <input type="submit" formmethod="get" formaction="index.html" value="გაგზავნა" />
                              <input type="reset" value="გასუფთავება" />
                          </p>
                      </form>
                  </body>
                  </html>
                  ელემენტი input-სგან ატრიბუტის type="image"  გამოყენებით ვღებულობთ სურათს, რომელიც გამოიყენება, როგორც ღილაკი:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ფორმები HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <p>
                              <input type="text" name="search" />
                              <input type="image" src="search.png" name="submit" />
                          </p>
                      </form>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  გარდა იმისა, რომ ღილაკს აქვს სურათი, მისი მოქმედება ისეთივეა როგორც ელემენტის input type="submit" ან button type="submit".`
              },
              {
                  title:"ტექსტური ველები",
                  data:`ერთსტრიქონიანი ტექსტური ველი იქმნება ელემენტით input რომელსაც ატრიბუტი type-ის მნიშვნელობა აქვს text.

                  <input type="text" name="login" />
                  დამატებითი ატრიბუტების მეშვეობით შესაძლებელია დავაკონფიგურიროთ ტექსტური ველი:
                  
                  dirname: ტექსტის მიმართულება
                  maxlength: სიმბოლოების მაქსიმალური რაოდენობა
                  pattern: შაბლონი, რომელსაც უნდა შეესაბამებოდეს შეყვანილი ტექსტი
                  placeholder: ტექსტი, რომელიც ჩანს ცარიელ ტექსტურ ველში
                  readonly: ამ ატრიბუტით ტექსტურ ველი ხდება მხოლოდ წაკითხვისთვის
                  required: უთითებს, რომ ველი აუცილებლად შესავსებია
                  size: ველის სიგანე ხილული სიმბოლოების რაოდენობით
                  value: ველის მნიშვნელობა ავტომატურად, სანამ არ შევცვლით
                  გამოვიყენოთ რამდენიმე ატრიბუტი:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ტექსტური ველი HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <p><input type="text" name="userName" placeholder="შეიყვანეთ სახელი" size="26" /></p>
                          <p><input type="text" name="userPhone" placeholder="შეიყვანეთ ტელეფონის ნომერი" size="26" maxlength="11" /></p>
                          <p>
                              <button type="submit">შენახვა</button>
                              <button type="reset">გაუქმება</button>
                          </p>
                      </form>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  მოცემულ მაგალითში ტექსტურ ველს ერთდროულად 2 ატრიბუტი აქვს  maxlength და size. ამასთან  size ანუ ზომა უფრო მეტია, ვიდრე  maxlength ანუ დასაშვები სიმბოლოების რაოდენობა. მიუხედავად ამისა ჩვენ ვერ შევიყვანთ  maxlength-ზე მეტ სიმბოლოს ამ ტექსტურ ველში.
                  
                  ასევე მნიშვნელოვანია განვასხვავოთ ატრიბუტები value და placeholder. ორივე მათგანი ტექსტურ ველს ანიჭებს ხილულ ტექსტს, მაგრამ placeholder წარმოადგენს მხოლოდ მინიშნებას და ამიტომ იგი იწერება მკრთალად, მაშინ როდესაც value წარმოადგენს ველის მნიშვნელობას:
                  
                  <p><input type="text" name="userName" value="Tom" size="26" /></p>
                  <p><input type="text" name="userPhone" placeholder="შეიყვანეთ ტელეფონის ნომერი" size="26" maxlength="11" /></p>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ატრიბუტები readonly და disabled ორივე ზღუდავს ტექსტური ველის რედაქტირებას, მაგრამ მათ განსხვავებული ვიზუალური ეფექტი ახლავს. თუ readonly ველს გარეგნულად არ ცვლის, disabled ველს ხდის ნაცრისფერს:
                  
                  <p><input type="text" name="userName" value="Tom" readonly /></p>
                  <p><input type="text" name="userPhone" value="123456789" disabled /></p>
                   
                  
                   HTML5-ის დოკუმენტი
                  
                  
                  
                  ტექსტური ველის ატრიბუტებს შორის აღსანიშნავია ატრიბუტი  list, რომელიც მიმართავს ელემენტს datalist. ეს უკანასკნელი შეიცავს ტექსტების ნაკრებს, რომელიც ტექსტურ ველზე გამოდის სიის სახით მინიშნებებისთვის:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ტექსტური ველი HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <input list="phonesList" type="text" name="model" placeholder="აირჩიეთ მოდელი" />       
                          <button type="submit">შენახვა</button>     
                      </form>
                      <datalist id="phonesList">
                          <option value="iPhone 6S" label="54000"/>
                          <option value="Lumia 950">35000</option>
                          <option value="Nexus 5X"/>
                      </datalist>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ტექსტური ველის ატრიბუტს list ენიჭება datalist-ის იდენტიფიკატორის (id) მნიშვნელობა. თვითონ datalist შეიცავს ელემენტებს option, რომლებიც წარმოადგენენ სიის ელემენტებს.
                  
                  ძებნის ველი
                  
                  ძებნის ველის შესაქმნელად გამოიყენება ელემენტი input ატრიბუტით type="search". ფორმით ის წარმოადგენს ჩვეულებრივ ტექსტურ ველს:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ტექსტური ველი HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <input type="search" name="term" />
                          <input type="submit" value="ძებნა" />
                      </form>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  პაროლის ველი
                  
                  პაროლის ველის შესაქმნელად გამოიყენება ელემენტი input ატრიბუტით type="password". მისი განმასხვავებელი ნიშანია ის, რომ შეყვანილი სიმბოლოების ნაცვლად მასში გამჩნდება წერტილები:
                  
                  <form>
                      <p><input type="text" name="login" /></p>
                      <p><input type="password" name="password" /></p>
                      <input type="submit" value="ავტორიზაცია" />
                  </form>
                   
                  
                  HTML5-ის დოკუმენტი`
              },
              {
                  title:"ნიშნულები და ავტოფოკუსი",
                  data:`შეყვანის ტექსტურ ველებთან ერთად ხშირად გამოიყენება ნიშნულები, რომლებიც იქმნება ელემენტის label მეშვეობით. ნიშნულები წარმოადგენენ ტექსტური ველის ანოტაციას ან სათაურს და უთითებენ, რისთვისაა ეს ველი განკუთვნილი:

                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ნიშნულები HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <p>
                              <label for="login">მომხმარებელი: </label>
                              <input type="text" id="login" name="login" />
                          </p>
                          <p>
                              <label for="password">პაროლი: </label>
                              <input type="password" id="password" name="password" />
                          </p>
                          <p>
                              <button type="submit">შესვლა</button>
                          </p>
                      </form>
                  </body>
                  </html>
                  ტექსტურ ველს აქვს ატრიბუტი  id="login", ამიტომ მის შესაბამის ნიშნულს აქვს ატრიბუტი for="login". ნიშნულზე მაუსის დაჭერით მისი შესაბამისი ველი იღებს ფოკუსს:
                  
                  HTML5-ის დოკუმენტი
                  
                  ნიშნულების როლი ამით ამოიწურება. ასევე შეგვიძლია რომელიმე ველს მივანიჭოთ ავტოფოკუსი და გვერდზე შესვლისას ფოკუსი იქნება ამ ველზე. ამისთვის გამოიყენება ატრიბუტი autofocus:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ნიშნულები HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <p>
                              <label for="login">მომხმარებელი: </label>
                              <input type="text" id="login" name="login" autofocus />
                          </p>
                          <p>
                              <label for="password">პაროლი: </label>
                              <input type="password" id="password" name="password" />
                          </p>
                          <p>
                              <button type="submit">შესვლა</button>
                          </p>
                      </form>
                  </body>
                  </html>
                   `
              },
              {
                  title:"ელემენტები რიცხვების შესაყვანად",
                  data:`რიცხვების შესაყვანად გამოიყენება ელემენტი input ატრიბუტით type="number". მისი კონფიგურაცია შესაძლებელია შემდეგი დამატებითი ატრიბუტების გამოყენებით:

                  min: მინიმალური დასაშვები მნიშვნელობა
                  max: მაქსიმალური დასაშვები მნიშვნელობა
                  readonly: მხოლოდ წაკითხვისთვის
                  required: მიუთითებს, რომ ველის შევსება აუცილებელია
                  step: მნიშვნელობა, რომლითაც ხდება ველის ზრდა (ბიჯი)
                  value: თავდაპირველი მნიშვნელობა 
                  გამოვიყენოთ რიცხვითი ველი:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>რიცხვითი ველები HTML5-ში</title>
                      </head>
                      <body>
                          <form>
                              <p>
                                  <label for="age">ასაკი: </label>
                                  <input type="number" step="1" min="1" max="100" value="10" id="age" name="age"/>
                              </p>
                              <p>
                                  <button type="submit">შენახვა</button>
                              </p>
                          </form>
                      </body>
                  </html>
                  მოცემულ მაგალითში რიცხვითი ველის თავდაპირველი მნიშვნელობაა 10, მინიმალური მნიშვნელობა 1, მაქსიმალური 100. ბიჯი ტოლია 1-ის.
                  
                  სხვადასხვა ბრაუზერში ეს ელემენტი გამოჩნდება სხვადასხვანაირად. მაგალითად:
                  
                  Google Chrome-ში
                  
                  HTML5-ის დოკუმენტი
                  
                  Microsoft Edge-ში
                  
                  HTML5-ის დოკუმენტი
                  
                  
                  
                  თუმცა თანამედროვე ბრაუზერების უმეტესობაში, გარდა IE 11-სა და Microsoft Edge-სი რიცხვით ველს მარჯვნივ აქვს ისრები მნიშვნელობის გაზრდა-შემცირებისთვის step ატრიბუტში მითითებული ბიჯით.
                  
                  როგორც ტექსტურ ველებში, რიცხვით ველებშიც შეგვიძლია გამოვიყენოთ სიები შესაძლო მნიშვნელობებით:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>რიცხვითი ველები HTML5-ში</title>
                      </head>
                      <body>
                          <form>
                              <p>
                                  <label for="price">ფასი: </label>
                                  <input type="number" list="priceList"
                                      step="1" min="3" max="100" value="10" id="price" name="price"/>
                              </p>
                              <p>
                                  <button type="submit">შენახვა</button>
                              </p>
                          </form>
                          <datalist id="priceList">
                              <option value="15" />
                              <option value="20" />
                              <option value="25" />
                          </datalist>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  მცოცავი ველი
                  
                  მცოცავი წარმოადგენს სკალას, სადაც შეიძლება მნიშვნელობების არჩევა. მის შესაქმნელად გამოიყენება ელემენტი input  ატრიბუტით type="range".  როგორც რიცხვით ველს, მასაც გააჩნია ატრიბუტები min, max, step და value:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>რიცხვითი ველები HTML5-ში</title>
                      </head>
                      <body>
                          <form>
                              <p>
                                  <label for="price">Цена:</label>
                                  <input type="range" step="1" min="0" max="100" value="10" id="price" name="price"/>100
                              </p>
                              <p>
                                  <button type="submit">შენახვა</button>
                              </p>
                          </form>
                      </body>
                  </html>
                   `
              },
              {
                  title:"ალმები და გადამრთველები",
                  data:` 
                  ალამი წარმოადგენს ელემენტს, რომელსაც გააჩნია ორი მდგომარეობა: ჩართული და გამორთული. მის შესაქმნელად გამოიყენება ელემენტი input ატრიბუტით type="checkbox":
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>ალამი HTML5-ში</title>
                  </head>
                  <body>
                      <h2>ტექნოლოგიები</h2>
                      <form>
                          <p>
                              <input type="checkbox" checked name="html5" />HTML5
                          </p>
                          <p>
                              <input type="checkbox" name="dotnet" />.NET
                          </p>
                          <p>
                              <input type="checkbox" name="java" />Java
                          </p>
                          <p>
                              <button type="submit">შენახვა</button>
                          </p>
                      </form>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ატრიბუტი checked საშუალებას გვაძლევს დავაყენოთ ალამი ჩართულ მდგომარეობაში.
                  
                  
                  
                  გადამრთველები
                  
                  გადამრთველები ანუ რადიოღილაკები ჰგავს ალმებს და მათაც გააჩნიათ ორი მდგომარეობა: ჩართული და გამორთული. მაგრამ გადამრთველები ერთიანდებიან ჯგუფებში და ერთ ჯგუფში მხოლოდ ერთი რადიოღილაკი შეიძლება იყოს ჩართული:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>გადამრთველები HTML5-ში</title>
                  </head>
                  <body>
                      <form>
                          <h2>მიუთითეთ სქესი</h2>
                          <p>
                              <input type="radio" value="man" checked name="gender" />კაცი
                          </p>
                          <p>
                              <input type="radio" value="woman" name="gender" />ქალი
                          </p>
                          <h2>აირჩიეთ ტექნოლოგია</h2>
                          <p>
                              <input type="radio" value="html5" checked name="tech" />HTML5
                          </p>
                          <p>
                              <input type="radio" value="net" name="tech" />.NET
                          </p>
                          <p>
                              <input type="radio" value="java" name="tech" />Java
                          </p>
                          <p>
                              <button type="submit">შენახვა</button>
                          </p>
                      </form>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  მნიშვნელოვან ატრიბუტს წარმოადგენს value. იგი საშუალებას აძლევს სერვერს გაიგოს, თუ რომელი გადამრთველი იყო მონიშნული:
                  
                  HTML5-ის დოკუმენტი
                  
                  შენახვაზე დაჭერის შემდეგ სერვერს გადაეცემა ინფორმაცია gender=man და tech=html5 იმის მიხედვით, თუ რომელი გადამრთველები იყო ჩართული.`
              },
              {
                  title:"ელემენტები ფერის, url-ის, ელექტრონული ფოსტის და ტელეფონის ნომრისთვის",
                  data:`ფერის შეყვანის ველი

                  ფერის შეყვანის ველის მისაღებად ელემეტ input-ს უნდა მივანიჭოთ ატრიბუტი type="color":
                  
                  <label for="favcolor">აირჩიეთ ფერი</label>
                  <input type="color"  id="favcolor" name="favcolor" />
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ამ ელემენტის მნიშვნელობა იქნება თექვსმეტობითი რიცხვით გამოსახული არჩეული ფერის კოდი. 
                  
                  datalist-ის მეშვეობით ელემენტს შეიძლება დაემატოს სია, საიდანაც იქნება შესაძლებელი რეკომენდირებული ფერის არჩევა:
                  
                  <label for="favcolor">აირჩიეთ ფერი</label>
                  <input type="color" list="colors" id="favcolor" name="favcolor" />
                  <datalist id="colors">
                      <option value="#0000FF" label="blue">
                      <option value="#008000" label="green">
                      <option value="#ff0000" label="red">
                  </datalist>
                  HTML5-ის დოკუმენტი
                  
                  datalist-ის თითოეული ელემენტ option-ს მნიშვნელობად უნდა ჰქონდეს თექვსმეტობითი სახით წარმოდგენილი რიცხვი, მაგალითად "#0000FF". არჩევის შემთხვევაში ფერის შეყვანის ველი მიიღებს შესაბამის მნიშვნელობას.
                  
                  
                  
                  url-ის, email-ის და ტელეფონის შესაყვანი ველები
                  
                  input ელემენტზე სხვადასხვა type ატრიბუტის მინიჭებით შეიძლება მივიღოთ url-ის, email-ის და ტელეფონის შესაყვანი ველები. ამისათვის type-ს უნდა მივცეთ შესაბამისად შემდეგი მნიშვნელობები: url, email, tel. 
                  
                  მათი კონფიგურაციისთვის გამოიყენება იგივე ატრიბუტები, რაც ჩვეულებრივი ტექსტური ველებისთვის:
                  
                  dirname: ტექსტის მიმართულება
                  maxlength: სიმბოლოების მაქსიმალური რაოდენობა
                  pattern: შაბლონი, რომელსაც უნდა შეესაბამებოდეს შეყვანილი ტექსტი
                  placeholder: ტექსტი, რომელიც ჩანს ცარიელ ტექსტურ ველში
                  readonly: ამ ატრიბუტით ტექსტურ ველი ხდება მხოლოდ წაკითხვისთვის
                  required: უთითებს, რომ ველი აუცილებლად შესავსებია
                  size: ველის სიგანე ხილული სიმბოლოების რაოდენობით
                  value: ველის მნიშვნელობა ავტომატურად, სანამ არ შევცვლით
                  list: ველზე ებმება შესაბამისი datalist
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>HTML5</title>
                  </head>
                  <body>
                      <form>
                          <p>
                              <label for="email">Email: </label>
                              <input type="email" placeholder="user@gmail.com" id="email" name="email"/>
                          </p>
                          <p>
                              <label for="url">URL: </label>
                              <input type="url" id="url" name="url"/>
                          </p>
                          <p>
                              <label for="phone">ტელეფონი: </label>
                              <input type="tel" placeholder="(XXX)-XXX-XX XX XX" id="phone" name="phone"/>
                          </p>
                          <p>
                              <button type="submit">შენახვა</button>
                          </p>
                      </form>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ასეთი ველების ძირითადი უპირატესობა მდგომარეობს იმაში, რომ თუ ჩვენ შევიყვანთ არასწორ მნიშვნელობას და შევეცდებით მის სერვერზე გაგზავნას, ბრაუზერი შეგვატყობინებს შეცდომის შესახებ და მონაცემებს არ გააგზავნის:`
              },
              {
                title:"ელემენტები თარიღისა და დროის შესაყვანად",
                data:`თარიღისა და დროის შესაყვანად HTML5-ში განსაზღვრულია input ელემენტის შემდეგი ტიპები:

                datetime-local: თარიღი და დრო
                date: თარიღი
                month: თვე
                time: დრო
                week: კვირა
                მაგალითად:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form>
                            <p>
                                <label for="firstname">სახელი: </label>
                                <input type="text" id="firstname" name="firstname"/>
                            </p>
                            <p>
                                <label for="date">დაბადების თარიღი: </label>
                                <input type="date" id="date" name="date" value="1995-05-12"/>
                            </p>
                            <p>
                                <button type="submit">შენახვა</button>
                            </p>
                        </form>
                    </body>
                </html>
                 
                
                თრიღის შესაყვანად შეიძლება ჩამოვშალოთ კალენდარი:
                
                 
                
                HTML5-ის დოკუმენტი
                
                უნდა აღინიშნოს, რომ ამ ელემენტის მოქმედება დამოკიდებულია ბრაუზერზე. ზემოთ მოცემული სურათი აღებულია Google Chrome-დან. Microsoft Edge-ში მას ექნება შემდეგი სახე:
                
                HTML5-ის დოკუმენტი
                
                ხოლო IE 11-ს და Firefox-ს საერთოდ არა აქვს ამ ელემენტის მხარდაჭერა.
                
                თარიღისა და დროის სხვა ელემენტების გამოყენებისთვის ვნახოთ მაგალითი:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form>
                            <p>
                                <label for="week">კვირა: </label>
                                <input type="week" name="week" id="week" />
                            </p>
                            <p>
                                <label for="localdate">თარიღი და დრო: </label>
                                <input type="datetime-local" id="localdate" name="date"/>
                            </p>
                            <p>
                                <label for="month">თვე: </label>
                                <input type="month" id="month" name="month"/>
                            </p>
                            <p>
                                <label for="time">დრო: </label>
                                <input type="time" id="time" name="time"/>
                            </p>
                            <p>
                                <button type="submit">შენახვა</button>
                            </p>
                        </form>
                    </body>
                </html>
                 `
            },  {
                title:"ფაილების გაგზავნა",
                data:`ფაილების გასაგზავნად გამოიყენება ელემენტი input ატრიბუტით type="file:"

                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form enctype="multipart/form-data" method="post" action="http://localhost:8080/postfile.php">
                            <p>
                                <input type="file" name="file" />
                            </p>
                            <p>
                                <input type="submit" value="გაგზავნა" />
                            </p>
                        </form>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                "Choose File" ღილაკზე დაჭერისას იხსნება ფაილის არჩევის ფანჯარა, ხოლო ფაილის არჩევის შემდეგ ღილაკის გვერდით გაჩნდება არჩეული ფაილის სახელი.
                
                მნიშვნელოვანია აღინიშნოს, რომ ფაილის სერვერზე გაგზავნის ფორმას უნდა ჰქონდეს ატრიბუტი enctype="multipart/form-data".
                
                ატრიბუტების მეშვეობით შეიძლება ელემენტის კონფიგურაციის შეცვლა:
                
                accept: ფაილის ტიპი, რომლის არჩევა იქნება შესაძლებელი
                multiple: საშუალებას იძლევა ავირჩიოთ რამდენიმე ფაილი
                required: ფაილის არჩევა აუცილებელია
                მაგალითად, მრავალი ფაილის არჩევის შესაძლებლობა:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form enctype="multipart/form-data" method="post" action="http://localhost:8080/postfile.php">
                            <p>
                                <input type="file" name="file" multiple />
                            </p>
                            <p>
                                <input type="submit" value="გაგზავნა" />
                            </p>
                        </form>
                    </body>
                </html>
                ამ შემთხვევაში ფაილის არჩევის ფანჯარაში შესაძლებელი იქნება რამდენიმე ფაილის არჩევა, ხოლო არჩევის მერე ღილაკის გვერდით გაჩნდება წარწერა არჩეული ფაილების რაოდენობით`
            },  {
                title:"ელემენტი select (სია)",
                data:` 

                ელემენტი select ქმნის სიას. ატრიბუტების მნიშვნელობების მიხედვით ეს შეიძლება იყოს ჩამოსაშლელი სია ან სია, რომელშიც შეიძლება ერთდროულად რამდენიმე ელემენტის არჩევა.
                
                შევქმნათ ჩამოსაშლელი სია:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form method="get">
                            <p>
                                <label for="phone">აირჩიეთ მოდელი:</label>
                                <select id="phone" name="phone">
                                    <option value="iphone 6s">iPhone 6S</option>
                                    <option value="lumia 950">Lumia 950</option>
                                    <option value="nexus 5x">Nexus 5X</option>
                                    <option value="galaxy s7">Galaxy S7</option>
                                </select>
                            </p>
                            <p>
                                <input type="submit" value="გაგზავნა" />
                            </p>
                        </form>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                ელემენტ select-ის შიგნით მოთავსებულია ელემენტები option -სიის ელემენტები. თითოეულ სიის ელემენტს აქვს ატრიბუტი value. ამასთან, არაა აუცილებელი, რომ value-ს მნიშვნელობა ემთხვეოდეს ტექსტს.
                
                ატრიბუტის selected მეშვეობით შეგვიძლია მივუთითოთ არჩეული ელემენტი. მაგალითად:
                
                <select id="phone" name="phone">
                     <option value="iphone 6s">iPhone 6S</option>
                     <option value="lumia 950">Lumia 950</option>
                     <option value="nexus 5x">Nexus 5X</option>
                     <option value="galaxy s7">Galaxy S7</option>
                </select>
                disabled ატრიბუტის მეშვეობით შეგვიძლია სიის რომელიმე ელემენტის არჩევა შევზღუდოთ. იგი ძირითადად გამოიყენება სათურების შესაქმნელად:
                
                <select id="phone" name="phone">
                    <option disabled selected>აირჩიეთ მოდელი</option>
                    <option value="iphone 6s">iPhone 6S</option>
                    <option value="lumia 950">Lumia 950</option>
                    <option value="nexus 5x">Nexus 5X</option>
                    <option value="galaxy s7">Galaxy S7</option>
                </select>
                 
                
                
                
                ბევრი ელემენტის ასარჩევი სიის შესაქმნელად გამოიყენება ატრიბუტი multiple:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form method="get">
                            <p>
                                <label for="phone">აირჩიეთ მოდელი:</label> <br/>
                            
                                <select multiple id="phone" name="phone">
                                    <option value="iphone 6s">iPhone 6S</option>
                                    <option value="lumia 950">Lumia 950</option>
                                    <option value="nexus 5x">Nexus 5X</option>
                                    <option value="galaxy s7">Galaxy S7</option>
                                </select>
                            </p>
                            <p>
                                <input type="submit" value="გაგზავნა" />
                            </p>
                        </form>
                    </body>
                </html>
                Ctrl კლავიშზე დაჭერით და მაუსის მეშვეობით შესაძლებელია რემდენიმე ელემენტის ერთდროულად მონიშვნა:
                
                HTML5-ის დოკუმენტი
                
                optgroup ტეგის გამოყენებით შესაძლებელია სიიის ელემენტების დაჯგუფება:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form method="get">
                            <p>
                                <label for="phone">აირჩიეთ მოდელი:</label>
                            
                                <select id="phone" name="phone">
                                    <optgroup label="Apple">
                                        <option value="iphone 6s">iPhone 6S</option>
                                        <option value="iphone 6s plus">iPhone 6S Plus</option>
                                        <option value="iphone 5se">iPhone 5SE</option>
                                    </optgroup>
                                    <optgroup label="Microsoft">
                                        <option value="lumia 950">Lumia 950</option>
                                        <option value="lumia 950 xl">Lumia 950 XL</option>
                                        <option value="lumia 650">Lumia 650</option>
                                    </optgroup>
                                </select>
                            </p>
                            <p>
                                <input type="submit" value="გაგზავნა" />
                            </p>
                        </form>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                დაჯგუფების გამოყენება შესაძლებელია როგორც ჩამოსაშლელი სიებისთვის, ასევე მრავალი არჩევის მქონე სიებისთვისაც.`
            },  {
                title:"ტექსტური არე (Textarea)",
                data:` 


                მრავალსტრიქონიანი ტექსტური ველისთვის გამოიყენება ელემენტი textarea:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form method="get">
                            <p>
                                <label for="comment">თქვენი კომენტარი:</label><br/>
                                <textarea name="comment" id="comment" placeholder="არაუმეტეს 200 სიმბოლოსი" maxlength="200"></textarea>  
                            </p>
                            <p>
                                <input type="submit" value="დამატება" />
                            </p>
                        </form>
                    </body>
                </html>
                 
                
                HTML5
                
                დამატებითი პარამეტრების cols და rows მეშვეობით შესაძლებელია სვეტების და სტრიქონების რაოდენობის განსაზღვრა:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <form method="get">
                            <p>
                                <label for="comment">თქვენი კომენტარი:</label><br/>
                                <textarea name="comment" id="comment" placeholder="შეიყვანეთ კომენტარი"
                                    cols="30" rows="7"></textarea>  
                            </p>
                            <p>
                                <input type="submit" value="დამატება" />
                            </p>
                        </form>
                    </body>
                </html>`
            },  {
                title:"ფორმების ვალიდაცია",
                data:` 


                ხშირად საჭირო ხდება ფორმებში მონაცემების შეტანის დროს შეიზღუდოს გარკვეული მნიშვნელობების შეტანა, რადგან მომხმარებელს ხშირად შეჰყავს არასწორი მონაცემები, მაგალითად, ველში, სადაც მხოლოდ ციფრები უნდა შეჰყავდეს, შეჰყავს ასოები და ა. შ. ამის თავიდან ასაცილებლად HTML5-ში არსებობს ვალიდაციის მექანიზმი. ვალიდაციის უპირატესობა მდგომარეობს იმაში, რომ მომხმარებელი დროულად იგებს შეცდომის შესახებ და ასწორებს შეტანილ მონაცემებს.
                
                ვალიდაციისთვის გამოიყენება შემდეგი ატრიბუტები:
                
                required: მოითხოვს მნიშვნელობის აუცილებლად შეყვანას. გამოიყენება ელემენტებისთვის textarea, select, input (ტიპით text, password, checkbox, radio, file, datetime-local, date, month, time, week, number, email, url, search, tel)
                min და max: მინიმალური და მაქსიმალური მნიშვნელობა. გამოიყენება ელემენტისთვის input ტიპით datetime-local, date, month, time, week, number, range
                pattern: შაბლონი, რომელსაც უნდა შეესაბამებოდეს შეყვანილი მნიშვნელობა. გამოიყენება ელემენტისთვის input ტიპით text, password, email, url, search, tel
                ატრიბუტი required
                
                ატრიბუტი required გულისხმობს, რომ ელემენტს აუცილებლად უნდა ჰქონდეს მნიშვნელობა:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ვალიდაცია HTML5-ში</title>
                    </head>
                    <body>
                        <form method="get">
                            <p>
                                <label for="login">მომხმარებელი:</label>
                                <input type="text" required id="login" name="login" />
                            </p>
                            <p>
                                <label for="password">პაროლი:</label>
                                <input type="password" required id="password" name="password" />
                            </p>
                            <p>
                                <input type="submit" value="შესვლა" />
                            </p>
                        </form>
                    </body>
                </html
                თუ ველებს არ შევავსებთ და დავაჭერთ შესვლას, გამოვა გაფრთხილება, რომ აუცილებელი ველები არაა შევსებული:
                
                HTML5
                
                ბრაუზერების მიხედვით შეუვსებელი აუცილებელი ველები სხვადასხვანაირად გამოისახება, მაგალითად Firefox-ში და Microsoft Edge-ში ასეთ ველებს უკეთდება წითელი ჩარჩო:
                
                Firefox
                
                HTML5
                
                Microsoft Edge
                
                HTML5
                
                ატრიბუტები min და max
                
                შესაყვანი მნიშვნელობების დიაპაზონის შესაზღუდავად გამოიყენება ატრიბუტები min და max:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ვალიდაცია HTML5-ში</title>
                    </head>
                    <body>
                        <form method="get">
                            <p>
                                <label for="age">ასაკი:</label>
                                <input type="number" min="1" max="100" value="18" id="age" name="age"/>
                            </p>
                            <p>
                                <input type="submit" value="გაგზავნა" />
                            </p>
                        </form>
                    </body>
                </html>
                 
                
                HTML5
                
                ატრიბუტი pattern
                
                ატრიბუტი pattern წარმოადგენს შაბლონს, რომელსაც უნდა შეესაბამებოდეს შეყვანილი მნიშვნელობები. შაბლონისთვის გამოიყენება ე. წ. რეგულარული გამოსახულებები (Regular expression). 
                
                განვიხილოთ მარტივი მაგალითი:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ვალიდაცია HTML5-ში</title>
                    </head>
                    <body>
                        <form method="get">
                            <p>
                                <label for="phone">ტელეფონი:</label>
                                <input type="text" placeholder="123-45-67"
                                        pattern="\d{3}-\d{2}-\d{2}-\d{2}" id="phone" name="phone" />
                            </p>
                            <p>
                                <input type="submit" value="გაგზავნა" />
                            </p>
                        </form>
                    </body>
                </html>
                ტელეფონის ნომრის შაბლონისთვის გამოყენებულია რეგულარული გამოსახულება "\d{3}-\d{2}-\d{2}-\d{2}". \d ნიშნავს ნებისმიერ ციფრს 0-დან 9-ის ჩათვლით, \d{3} ნიშნავს, რომ ზედიზედ 3 ციფრი უნდა ეწეროს. \d{2} ნიშნავს ზედიზედ 2 ციფრს. საბოლოოდ შეყვანილ ტელეფონის ნომერს უნდა ჰქონდეს სახე 123-45-67. თუ შევიყვანთ ისეთ ტექსტს, რომელიც შაბლონს არ შეესაბამება, ბრაუზერი გამოგვიტანს შეცდომის შეტყობინებას:
                
                HTML5
                
                ტელეფონის ნომერი უნდა ეწეროს შემდეგი სახით: 577-12-55-01.
                
                ვალიდაციის გამორთვა
                
                ფორმის ვალიდაცია ყოველთვის არაა სასურველი. ამ შემთხვევაში ფორმას უნდა ჰქონდეს ატრიბუტი novalidate ან gagzavnis Rilaks formnofalidate.
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ვალიდაცია HTML5-ში</title>
                    </head>
                    <body>
                        <form method="get" novalidate>
                            <p>
                                <label for="phone">ტელეფონი:</label>
                                <input type="text" placeholder="123-45-67"
                                        pattern="\d{3}-\d{2}-\d{2}-\d{2}" id="phone" name="phone" />
                            </p>
                            <p>
                                <input type="submit" value="გაგზავნა" formnovalidate />
                            </p>
                        </form>
                    </body>
                </html>`
            },  {
                title:"ელემენტები fieldset და legend",
                data:`ფორმის ელემენტების დაჯგუფებისთვის ხშირად გამოიყენება ელემენტი fieldset. ის ავლებს საზღვრებს მასში მოქცეული ელემენტების გარეთ და ქმნის მათგან ჯგუფს. მასთან ერთად გამოიყენება ელემენტი legend, რომელიც ქმნის სათაურს ჯგუფისთვის:

                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>HTML5</title>
                    </head>
                    <body>
                        <h2>საიტზე შესვლა</h2>
                        <form>
                            <fieldset>
                                <legend>შეიყვანეთ მონაცემები:</legend>
                                <label for="login">მომხმარებელი:</label><br>
                                <input type="text" name="login" id="login" /><br>
                                <label for="password">პაროლი:</label><br>
                                <input type="password" name="password" id="password" /><br>
                                <input type="submit" value="ავტორიზაცია">
                            </fieldset>
                        </form>
                    </body>
                </html>`
            }, 
            ]
        },
        {
            title:"	თავი 4. გვერდის სემანტიკური სტრუქტურა",
            content:[
                {
                    title:"ელემენტი article",
                    data:` 


                    ელემენტი article წარმოადგენს ინფორმაციის ერთიან ბლოკს ვებგვერდზე, რომელიც შეიძლება ცალკე განვიხილოთ და გამოვიყენოთ. მაგალითად, ეს შეიძლება იყოს პოსტი ფორუმზე ან სტატია ბლოგზე, მომხმარებლის კომენტარი.
                    
                    ერთი ელემენტი article შეიძლება შეიცავდეს რამდენიმე ელემენტს article. მაგალითად, შეიძლება ერთი article იყოს მთლიანად სტატია ბლოგზე, რომელიც შეიცავს სხვა ელემენტებს article, როგორც მომხმარებლების კომენტარებს ამ სტატიაზე.ანუ სტატია ბლოგზე ჩვენ შეგვიძლია განვიხილოთ, როგორც ცალკე სემანტიკური ერთეული, ამავე დროს თვითონ კომენტარებიც განვიხილოთ ცალკე, ვებგვერდის სხვა შიგთავსისგან დამოუკიდებლად.
                    
                    გამოვიყენოთ article ბლოგის სტატიისა და მისი კომენტარებისთვის:
                    
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="utf-8">
                        <title>სემანტიკური მარკირება HTML5-ში</title>
                    </head>
                    <body>
                        <article>
                            <h2>Lorem ipsum</h2>
                            <div>
                                Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna
                                aliquam erat ...
                            </div>
                            <div>
                                <h3>კომენტარები</h3>
                                <article>
                                    <h4>არა უშავს</h4>
                                    <p>ნორმალური სტატიაა...</p>
                                </article>
                                <article>
                                    <h4>სისულელეა</h4>
                                    <p>მე არ მომეწონა</p>
                                </article>
                                <article>
                                    <h4>გაუგებარია</h4>
                                    <p>ნეტა, რაზეა საერთოდ?</p>
                                </article>
                            </div>
                        </article>
                    </body>
                    </html>
                     
                    
                     
                    
                    HTML5-ის დოკუმენტი
                    
                    აქ მთლიანი სტატია მოქცეულია ერთ article ელემენტში, ამასთან ყოველი ახალი კომენტარი წარმოადგენს ცალკე article-ს.
                    
                    article გამოყენებისას უნდა გვახსოვდეს, რომ თითოეული ელემენტი უნდა იდენტიფიცირდებოდეს h1-h6 სათაურის მეშვეობით.`
                },
                {
                  title:"ელემენტი section",
                  data:` 
                  
                  
                  ელემენტი seqtion აერთიანებს html გვერდის ერთმანეთთან დაკავშირებულ ცალკეულ ნაწილებს და ქმნის მათგან ჯგუფს. მაგალითად, seqtion შეიძლება აერთიანებდეს ჩანართების ერთობლიობას, ახალ ამბებს, გაერთიანებულს კატეგორეიბად და ა.შ.
                  
                  თითოეული ელემენტი უნდა იდენტიფიცირდებოდეს h1-h6 სათაურის მეშვეობით.
                  
                  ერთი ელემენტი section შეიძლება შეიცავდეს რამდენიმე ელემენტ article-ს, ასევე, ერთი ელემენტი article შეიძლება შეიცავდეს რამდენიმე ელემენტ section-ს.
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>სემანტიკური მარკირება HTML5-ში</title>
                  </head>
                  <body>
                      <article>
                          <h1>Lorem ipsum</h1>
                          <section>
                              <h2>შინაარსი</h2>
                              <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh
                              euismod tincidunt ut laoreet dolore magna aliquam erat ...</p>
                          </section>
                          <section>
                              <h3>კომენტარი</h3>
                              <article>
                                  <h4>არა უშავს</h4>
                                  <p>ნორმალური სტატიაა</p>
                              </article>
                              <article>
                                  <h4>სისულელეა</h4>
                                  <p>მე არ მომეწონა...</p>
                              </article>
                              <article>
                                  <h4>გაუგებარია</h4>
                                  <p>ნეტა, რაზეა საერთოდ?</p>
                              </article>
                          </section>
                      </article>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  აქ ძირითადი შინაარსის ბლოკისთვის შეცმნილია სექცია, ასევე კომენტარებისთვისაც შექმნილია სექცია რამდენიმე არტიკლით.`
              },
              {
                  title:"ელემენტი nav",
                  data:` 


                  ელემენტი nav გამოიყენება იმ ელემენტების გასაერთიანებლად, რომელთა დანიშნულება საიტზე ნავიგაციაა. როგორც წესი, ეს დაუნომრავი სიაა ბმულებით.
                  
                  ერთ ვებგვერდზე შესაძლებელია გამოვიყენოთ რამდენიმე ელემენტი nav. მაგალითად, ერთი ელემენტი nav საიტის გვერდებზე გადასასვლელად, მეორე კი გვერდის შიგნით ნავიგაციისთვის.
                  
                  არაა აუცილებელი ყველა ბმული მოვათავსოთ ელემენტში nav. ზოგიერთი ბმულები შეიძლება არ წარმოადგენდნენ ურთიერთდაკავშირებულ ბლოკს ნავიგაციისთვის. მაგალითად, ბმული, რომელსაც გადავყავართ მთავარ გვერდზე, ბმული სალიცენზიო ხელშეკრულებაზე, რომლებიც ხშირად მოთავსებულია გვერდის ბოლოში, არაა აუცილებელი, რომ მოვაქციოთ ელემენტში nav.
                  
                  გამოვიყენოთ ელემენტი nav სანავიგაციო ბმულებისთვის:
                  
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="utf-8">
                      <title>სემანტიკური მარკირება HTML5-ში</title>
                  </head>
                  <body>
                      <nav>
                          <ul>
                              <li><a href="/">მთავარი</a></li>
                              <li><a href="/blog">ბლოგი</a></li>
                              <li><a href="/contacts">კონტაქტი</a></li>
                          </ul>
                      </nav>
                      <article>
                          <header>
                              <h2>მოთხრობა 2 ნაწილად</h2>
                          </header>
                          <nav>
                              <ul>
                                  <li><a href="#part1">ნაწილი 1</a></li>
                                  <li><a href="#part2">ნაწილი 2</a></li>
                              </ul>
                          </nav>
                          <div>
                              <section id="part1">
                                  <h2>ნაწილი 1</h2>
                                  <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.
                                  Lorem Ipsum has been the industry...</p>
                              </section>
                              <section id="part2">
                                  <h2>ნაწილი 2</h2>
                                  <p>There are many variations of passages of Lorem Ipsum available..</p>
                              </section>
                          </div>
                          <footer>
                              
                          </footer>
                      </article>
                      <footer>
                          <p><a href="/license">სალიცენზიო ხელშეკრულება</a> |
                          <a href="/about">საიტის შესახებ</a> |
                          <a href="/donation">Donations</a></p>
                          <p><small>© Copyright 2016 MyCorp.</small></p>
                      </footer>
                  </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  აქ გამოყენებულია ნავიგაციის 2 ბლოკი: ერთი გვერდებს შორის ნავიგაციისთვის, მეორე გვერდის შიგნით ნავიგაციისთვის.
                  
                  არაა აუცილებელი ყველა ბმული მოვათავსოთ ელემენტში nav. ზოგიერთი ბმული ამ გვერდზე მოთავსებულია ელემენტში footer.`
              },
              {
                  title:"ელემენტები header, footer და address",
                  data:` 

 
                  
                  ელემენტი header გამოიყენება როგორც შესავალი ნაწილი, რომელიც წინ უსწრებს ძირითად შინაარსს. აქ შეიძლება იყოს გვერდის სათაური, ნავიგაცია, სხვადასხვა დამხმარე საშუალებები. მაგალითად:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სემანტიკური მარკირება HTML5-ში</title>
                      </head>
                      <body>
                          <header>
                              <h1>ტელეფონების ონლაინ მაღაზია</h1>
                                  <nav>
                                      <ul>
                                          <li><a href="/apple">Apple</a>
                                          <li><a href="/microsoft">Microsoft</a>
                                          <li><a href="/samsung">Samsung</a>
                                      </ul>
                                  </nav>
                          </header>
                          <div>
                              ინფორმაცია მობილურების ბაზრის სიაახლეების შესახებ...
                          </div>
                      </body>
                  </html>
                  ელემენტ header-ში არ შეიძლება მოვათავსოთ ელემენტი address, footer ან სხვა header.
                  
                  footer
                  
                  ელემენტი footer როგორც წესი შეიცავს ინფორმაციას კონტენტის ავტორის, კოპირაიტის, პუბლიკაციის თარიღის შესახებ, ბმულების ბლოკს მსგავს რესურსებზე და ა. შ. როგორც წესი, მსგავსი ინფორმაცია თავსდება გვერდის ბოლოში, თუმცა footer არ გააჩნია მკაცრად განსაზღვრული ადგილი და შეიძლება მოთავსდეს ვებგვერდის სხვადასხვა ადგილას.
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სემანტიკური მარკირება HTML5-ში</title>
                      </head>
                      <body>
                          <h1>Xiaomi Mi 5</h1>
                          <div>
                              Xiaomi Mi 5 აღჭურვილია რვაბირთვიანი პროცესორით Qualcomm Snapdragon 820.
                              შიდა მეხსიერების მოცულობა - 32 ან 64 МБ.
                          </div>
                          <footer>
                              <p><a href="/license">სალიცენზიო შეთანხმება</a><br/>
                              Copyright © 2016. SomeSite.com</p>
                          </footer>
                      </body>
                  </html>
                  აქ footer განსაზღვრულია მთელი გვერდისთვის . მასში მოთავსებულია ბმული სალიცენზიო შეთანხმებაზე და ინფორმაცია კოპირაიტზე.
                  
                  footer არაა აუცილებელი იყოს მთელი გვერდისთვის. ის შეიძლება იყოს როგორც კონტენტის ცალკე სექცია:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სემანტიკური მარკირება HTML5-ში</title>
                      </head>
                      <body>
                          <section>
                              <h1>ბოლო სტატიები</h1>
                              <article>
                                  <h2>ანონსი Samsung Galaxy S7</h2>
                                  <p>გამოვიდა ახალი ფლაგმანი კომპანიისგან Samsung Galaxy S7.....</p>
                                  <footer>
                                      გამოქვეყნების თარიღი: <time datetime="2016-03-16T15:16-00:00">16.03.2016 15:16</TIME>
                                  </footer>
                              </article>
                              <article>
                                  <h2>ფასდაკლებები Microsoft Lumia 950</h2>
                                  <p>1 მარტიდან Microsoft Lumia 950 ღირს 50 ლარით იაფი...</p>
                                  <footer>
                                      გამოქვეყნების თარიღი: <time datetime="2016-03-01T14:36-00:00">01.03.2016 14:36</TIME>
                                  </footer>
                              </article>
                          </section>
                      </body>
                  </html>
                  address
                  
                  ელემენტი address განკუთვნილია საკონტაქტო ინფორმაციისთვის, რომელიც დაკავშირებულია უახლოეს ელემენტთან article ან body. ხშირად იგი მოთავსებულია footer-ის შიგნით.
                  
                  <footer>
                      <address>
                          საკონტაქტო ინფორმაცია <a href="mailto:js@example.com">ტომ სმიტი</a>.
                      </address>
                      <p>© copyright 2016 Example Corp.</p>
                  </footer>`
              },
              {
                  title:"ელემენტი aside",
                  data:` 


                  ელემენტი aside განკუთვნილია შიგთავსისთვის, რომელიც ირიბადაა დაკავშირებული გვერდის დანარჩენ კონტენტთან და რომელიც შეიძლება განვიხილოთ მისგან დამოუკიდებლად. იგი შეიძლება გამოვიყენოთ საიდბარებისთვის, სარეკლამო ბლოკებისთვის და ა. შ.
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სემანტიკური მარკირება HTML5-ში</title>
                      </head>
                      <body>
                          <aside style="float:right; width:200px;">
                              <h2>ფასდაკლება Microsoft Lumia 950</h2>
                              <p>მხოლოდ 31 მარტამდე Microsoft Lumia 950 იქნება 50 ლარით იაფი. 
                                  ამასთან, საჩუქრად მიიღებთ უფასო ჩუპა-ჩუპსს. <a href="buy/id=3">ყიდვა</a></p>
                          </aside>
                          <article>
                              <h2>Samsung Galaxy S7</h2>
                              <p>კომპანია სამსუნგმა გამოუთვა ახალი სმარტფონი Samsung Galaxt S7. ახალ სმარტფონთან ერთად
                              სამსუნგმა წარმოადგინა ვირტუალური რეალობის ახალი შლემი Gear VR...</p>
                          </article>
                      </body>
                  </html>`
              },
              {
                  title:"ელემენტი main",
                  data:` 


                  ელემენტი main წარმოადგენს ვებგვერდის ძირითად ნაწილს. ეს წარმოადგენს უნიკალურ კონტენტს და იქ არ უნდა იყოს სხვადასხვა გვერდებზე განმეორებადი საიდბარები, ნავიგაციის ბმულები, ინფორმაცია კოპირაიტზე, ლოგოტიპები და ა. შ. გამოვიყენოთ ელემენტი main:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სემანტიკური მარკირება HTML5-ში</title>
                      </head>
                      <body>
                          <main>
                              <h1>მოდელები Snapdragon 808-ით</h1>
                              <p>მოდელები, რომელთაც გააჩნიათ პროცესორი Snapdragon 808</p>
                              
                              <article>
                                <h2>Google Nexus 5X</h2>
                                <p>Nexus 5X წარმოადგენს კომპაქტურ და მძლავრ მოწყობილობას ყოველდღიური ამოცანების გადასაწყვეტად.
                                აღჭურვილია 5.2 დუიმიანი ეკრანით და ექვსბირთვიანი პროცესორით Snapdragon 808...</p>
                              </article>
                    
                              <article>
                                <h2>Microsoft Lumia 950</h2>
                                <p>Microsoft Display Dock-ის დახმარებით თქვენი სმარტფონი Lumia 950 Dual SIM გარე მონიტორით,
                                   კლავიატურით და მაუსით გადაიქცევა სრულფასოვან კომპიუტერად...</p>
                              </article>
                            </main>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  არაა საჭირო, რომ ვიფიქროთ, თითქოს მთელი ვებგვერდი უნდა მოვაქციოთ ელემენტშო main. მასთან ერთად ასევე უნდა გამოვიყენოთ სხვა ელემენტებიც, მაგალითად header,footer და ა. შ.
                  
                  <body>
                      <header>
                          ..............
                      </header>
                      <main>
                          .................  
                      </main>
                      <footer>
                          .................  
                      </footer>
                  </body>
                   
                  
                  უნდა გავითვალისწინოთ, რომ ელემენტი main არ შეიძლება იყოს მოქცეული ისეთი ელემენტების შიგნით, როგორიცაა article, aside, footer, header, nav.
                  
                  IE 11 და წინა ვერსიებს არ გააჩნიათ main ელემენტის მხარდაჭერა. ამიტომ სასურველია გამოვიტენოთ ასევე ატრიბუტი role:
                  
                  <main role="main">
                      ...
                  </main>`
              },
           
            ]
        },
        {
            title:"თავი 5. CSS3-ის საფუძვლები. სელექტორები",
            content:[
                {
                    title:"სტილები",
                    data:` 
                    
                    
                    რამდენ ელემენტსაც არ უნდა შეიცავდეს, html დოკუმენტი იქნება უსიცოცხლო სტილების გამოყენების გარეშე. სტილები, ანუ უფრო ზუსტად სტილების კასკადური ცხრილები (Cascading Style Sheets) ან უბრალოდ CSS განსაზღვრავს დოკუმენტის გარეგნულ იერსახეს.მოკლედ განვიხილოთ სტილების გამოყენება HTML5-ში.
                    
                    CSS სტილი წარმოადგენს წესს და უთითებს ბრაუზერს, თუ როგორ უნდა გამოისახოს ესა თუ ის ელემენტი, როგორ მოხდეს მისი ფორმატირება. ფორმატირება გულისხმობს ელემენტის ფერს, ფონს, შრიფტს, ზომებს და ა. შ.
                    
                    სტილის განსაზღვრა შედგება ორი ნაწილისგან: სელექტორი, რომელიც მიუთითებს ელემენტზე და სტილის გამოცხადების ბლოკი - ბრძანებების ნაკრები, რომლებიც ადგენენ ფორმატირების წესებს. მაგალითად:
                    
                    div{
                        background-color:red;
                        width: 100px;
                        height: 60px;
                    }
                    მოცემულ მაგალითში სელექტორს წარმოადგენს div. ეს სელექტორი მიუთითებს, რომ მოცემული სტილი გამოიყენება ყველა div ელემენტისთვის. სელექტორის შემდეგ ფიგურულ ფრჩხილებში მოცემულია სტილების გამოცხადების ბლოკი. ფიგურულ ფრჩხილებში მოქცეულია ბრძანებები, რომლებიც განსაზღვრავენ, თუ როგორ უნდა მოხდეს ელემენტების ფორმატირება.
                    
                    თითოეული ბრძანება შედგება თვისებისგან და მნიშვნელობისგან. მაგალითად ბრძანებაში 
                    
                    background-color:red;
                    background-color წარმოადგენს თვისებას, ხოლო red - მნიშვნელობას. თვისება განსაზღვრავს კონკრეტულ სტილს. თვისებები CSS-ში მრავლადაა. მაგალითად, background-color განსაზღვრავს ფონის ფერს. ორწერტილის შემდეგ მოდის ამ თვისების მნიშვნელობა. ზემოთ მოცემული ბრძანება განსაზღვრავს, რომ ფონის ფერი არის წითელი. ყოველი ასეთი ბრძანების ბოლოს იწერება წერტილმძიმე.
                    
                    ასეთი სტილების ერთობლიობას უწოდებენ სტილების ცხრილს ანუ CSS (Cascading Style Sheets). არსებობს სტილების გამოცხადების სხვადასხვა ხერხი.
                    
                    ატრიბუტი style
                    
                    სტილების გამოცხადების ერთ-ერთი ხერხი მდგომარეობს იმაში, რომ ხდება სტილის ჩაშენება უშუალოდ ელემენტში style ატრიბუტის სახით:
                    
                    <!DOCTYPE html>
                    <html>
                        <head>
                            <meta charset="utf-8">
                            <title>სტილები</title>
                        </head>
                        <body>
                            <h2 style="color:blue;">სტილები</h2>
                            <div style="width: 100px; height: 100px; background-color: red;"></div>
                        </body>
                    </html>
                     
                    
                    HTML5-ის დოკუმენტი
                    
                    აქ მოცემულია ორი ელემენტი: სათაური h2 და div. სათურს განსაზღვრული აქვს ტექსტის ფერი თვისების color მეშვეობით, ხოლო div ელემენტს თვისებები სიგანე (width), simaRle(height) და ფონის ფერი (background-color).
                    
                    მეორე მეთოდი მდგომარეობს html დოცუმენტში style ელემენტის გამოყენება. იგი უთითებს ბრაუზერს, რომ მის შიგნით არსებული მონაცემები წარმოადგენს CSS კოდს, და არა html-ს:
                    
                    <!DOCTYPE html>
                    <html>
                        <head>
                            <meta charset="utf-8">
                            <title>სტილები</title>
                            <style>
                            h2{
                                color:blue;
                            }
                            div{
                                width: 100px;
                                height: 100px;
                                background-color: red;
                            }
                            </style>
                        </head>
                        <body>
                            <h2>სტილები</h2>
                            <div></div>
                        </body>
                    </html>
                    ამ შემთხვევაშიც შედეგი იქნება ზუსტად ისეთივე, როგორც წინა შემთხვევაში.
                    
                    ელემენტი style ძირითადად განისაზღვრება head ელემენტის შიგნით, თუმცა შეიძლება იყოს სხვა ადგილზეც. იგი შეიცავს სტილების ერთობლიობას. თითოეული სტილი შედგება სელექტორისგან და ფიგურულ ფრჩხილებში მოქცეული თვისებებისაგან თავისი მნიშვნელობებით. 
                    
                    
                    
                    პირველისგან განსხვავებით, მეორე ხერხი კოდს ხდის უფრო სუფთას სტილების ცალკე ელემენტად გამოტანის გამო. ასევე არსებობს მესამე ხერხიც, რომელიც მდგომარეობს სტილების ცალკე ფაილად გატანაში.
                    
                    შევქმნათ იგივე საქაღალდეში, სადაც ჩვენი html ფაილია, ფაილი styles.css და შიგნით ჩავწეროთ იგივე სტილები, რაც გვქონდა style ელემენტში.:
                    
                    h2{
                        color:blue;
                    }
                    div{
                        width: 100px;
                        height: 100px;
                        background-color: red;
                    }
                    თვითონ html ფაილის ტექსტი შევცვალოთ შემდეგნაირად:
                    
                    <!DOCTYPE html>
                    <html>
                        <head>
                            <meta charset="utf-8">
                            <title>სტილები</title>
                            <link rel="stylesheet" type="text/css" href="styles.css"/>
                            </style>
                        </head>
                        <body>
                            <h2>სტილები</h2>
                            <div></div>
                        </body>
                    </html>
                    html დოკუმენტში ახლა უკვე არა გვაქვს ელემენტი style, სამაგიეროდ დაემატა ელემენტი link, რომელიც ახდენს ჩვენს მიერ შექმნილი სტილების ფაილის styles.css ჩართვას: <link rel="stylesheet" type="text/css" href="styles.css"/>.
                    
                    ამგვარად, ცალკე ფაილში სტილების განსაზღვრის შედეგად html კოდი უფრო სუფთაა, გვერდის სტრუქტურა გამოყოფილია მისი სტილიზაციისაგან. ასეთი მიდგომისას უფრო იოლია სტილების მოდიფიცირება, ვიდრე იმ შემთხვევაში, თუ სტილები იქნებოდა ელემენტ style-ში ან თითოეული ელემენტის ატრიბუტ style-ში. შესაბამისად ასეთი მიდგომა უფრო მიღებული და უპირატესია HTML5-ში.
                    
                    ცალკე ფაილებში სტილების გატანა ამცირებს დატვირთვას ვებსერვერზე კეშირების მექანიზმის გამოყენებით. რადგან ვებბრაუზერს შეუძლია მოახდინოს CSS ფაილის კეშირება და შემდგომში მიმართავს კეშირებულ ფაილს სერვერის ნაცვლად.
                    
                    შესაძლებელია მოხდეს ამ სამი მეთოდის შერწყმა, როდესაც ერთი ელემენტის ზოგიერთი თვისება განსაზღვრულია ცალკე css ფაილში, ზოგი style ელემენტში, ხოლო ზოგი თვითონ ამ ელემენტის style ატრიბუტში. მაგალითად:
                    
                    <!DOCTYPE html>
                    <html>
                        <head>
                            <link rel="stylesheet" type="text/css" href="styles.css"/>
                            <style>
                                div{
                                    width:200px;
                                }
                            </style>
                        </head>
                        <body>
                            <div style="width:120px;"></div>
                        </body>
                    </html>
                     
                    
                    div{
                        width:50px;
                        height:50px;
                        background-color:red;
                    }
                    მოცემულ მაგალითში div ელემენტისთვის ერთი და იგივე თვისება width განსაზღვრულია 3 ადგილას სხვადასხვა მნიშვნელობებით. რომელ მნიშვნელობას მიიღებს ელემენტი? მოქმედებს პრიორიტეტების შემდეგი სისტემა:
                    
                    თუ ელემენტს განსაზღვრული აქვს ჩაშენებული სტილები (inline-სტილი) style ატრიბუტის სახით, ისინი წარმოადგენენ უმაღლეს პრიორიტეტს. ჩვენს შემთხვევაში ელემენტის სიგანე იქნება 12 პიქსელი.
                    შემდეგი პრიორიტეტში მოდის სტილები, განსაზღვრული ელემენტში style.
                    ცალკე ფაილებში განსაზღვრულ სტილებს აქვთ ყველაზე დაბალი პრიორიტეტი.
                    html ატრიბუტები და CSS
                    
                    html-ის ბევრ ელემენტს აქვს შესაძლებლობა სტილები განესაზღვროს ატრიბუტების მეშვეობით. მაგალითად, ბევრ ელემენტს აქვს ატრიბუტები width და height სიგანისა და სიმაღლის მისათითებლად. თუმცა ყოველთვის უმჯობესია თავი ავარიდოთ სტილების ამგვარად განსაზღვრას და გამოვიყენოთ CSS სტილები. უმჯობესია html-ში მოცემული იყოს ვებგვერდის სტრუქტურა, ხოლო სტილიზაცია მოხდეს CSS სტილების მეშვეობით.
                    
                    CSS კოდის ვალიდაცია
                    
                    CSS კოდის დაწერისას შეიძლება წამოიჭრას კითხვები, სწორად არის ტუ არა განსაზღვრული სტილები, კორექტულია თუ არა ისინი. ასეთ შემთხვევაში შეიძლება ვისარგებლოთ CSS ვალიდატორით, რომელიც ხელმისაწვდომია მისამართზე: http://jigsaw.w3.org/css-validator/ .
                    
                    `
                },
                {
                  title:"სელექტორები",
                  data:` 
                  
                  
                  სტილის განსაზღვრა იწყება სელექტორით:
                  
                  div{
                      width:50px; /* სიგანე */
                      height:50px; /* სიმაღლე */
                      background-color:red; /* ფონის ფერი */
                      margin: 10px; /* დაშორება სხვა ელემენტებისგან */
                  }
                  მოცემულ მაგალითში სელექტორს წარმოადგენს div. რიგ სელექტორებს აქვთ იმ ელემენტის სახელი, რომლის ფორმატირებასაც ისინი ემსახურებიან. მაგალითად, div, p, h2 და ა. შ. ასეთი სელექტორებით განსაზღვრული სტილები ვრცელდება ყველა შესაბამის ელემენტზე. შესაბამისად, ზემოთ განსაზღვრული სტილი გავრცელდება გვერდის ყველა div ელემენტზე:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              div{
                                  width:50px;
                                  height:50px;
                                  background-color:red;
                                  margin: 10px;
                              }
                          </style>
                      </head>
                      <body>
                          <h2>სელექტორები</h2>
                          <div></div>
                          <div></div>
                          <div></div>
                      </body>
                  </html>
                  აქ სამი div ელემენტია და სამივე მიიღებს განსაზღვრულ სტილს:
                  
                  HTML5-ის დოკუმენტი
                  
                  კლასები
                  
                  ზოგჯერ ერთი და იგივე ელემენტებისთვის საჭიროა სხვადასხვანაირი სტილის მიცემა. ამისთვის გამოიყენება კლასები. კლასის სელექტორის განსაზღვრისთვის მისი სახელის წინ დაისმის წერტილი:
                  
                  .redBlock{
                      background-color:red;
                  }
                  კლასის დასახელება შეიძლება იყოს ნებისმიერი. ჩვენს მაგალითში კლასის სახელია redBlock. კლასის დასახელებაში დასაშვებია ასოების, ციფრების, ტირეს და ქვედა ტირეს გამოყენება, პირველი სიმბოლო აუცილებლად უნდა იყოს ასო.
                  
                  მნიშვნელობა აქვს ასოების რეგისტრს: "article" და "ARTICLE" იქნება სხვადასხვა კლასი.
                  
                  კლასის განსაზღვრის შემდეგ მისი გამოყენება შეიძლება ელემენტთან class ატრიბუტის სახით. მაგალითად:
                  
                  <div class="redBlock"></div>
                  განვსაზღვროთ და გამოვიყენოთ რამდენიმე კლასი:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>კლასები</title>
                          <style>
                              div{
                                  width: 50px;
                                  height: 50px;
                                  margin: 10px;
                              }
                              .redBlock{
                                  background-color: red;
                              }
                              .blueBlock{
                                  background-color: blue;
                              }
                          </style>
                      </head>
                      <body>
                          <h2>კლასები</h2>
                          <div class="redBlock"></div>
                          <div class="blueBlock"></div>
                          <div class="redBlock"></div>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                   
                  
                  
                  
                   
                  
                  იდენტიფიკატორები
                  
                  ვებგვერდის უნიკალური ელემენტების იდენტიფიცირებისთვის გამოიყენება იდენტიფიკატორები, რომლებიც გამოისახება ატრიბუტით id. მაგალითად, გვერდზე შეიძლება იყოს სათაურის ბლოკი:
                  
                  <div id="header"></div>
                  იდენტიფიკატორებისთვის სტილის განსაზღვრა კლასებისთვის სტილის განსაზღვრის იდენტურია, მხოლოდ სელექტორის წინ წერტილის ნაცვლად დაისმის სიმბოლო #:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>იდენტიფიკატორები</title>
                          <style>
                              div{
                                  margin: 10px;
                                  border: 1px solid #222;
                              }
                              #header{
                                  height: 80px;
                                  background-color: #ccc;
                              }
                              #content{
                                  height: 180px;
                                  background-color: #eee;
                              }
                              #footer{
                                  height: 80px;
                                  background-color: #ccc;
                              }
                          </style>
                      </head>
                      <body>
                          <div id="header">საიტის სათაური</div>
                          <div id="content">ძირითადი ნაწილი</div>
                          <div id="footer">ქვედა ნაწილი</div>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  უნდა აღინიშნოს, რომ იდენტიფიკატორები ძირითადად გამოიყენება არა სტილიზაციისთვის, არამედ ვებგვერდის სტრუქტურის ასაგებად. სტილიზაციისთვის ძირითადად გამოიყენება კლასები.
                  
                  უნივერესალური სელექტორი
                  
                  CSS-ში არის ე. წ. უნივერსალური სელექტორი ვარსკვლავის (8) სახით. ის ანიჭებს  სტილს ვებგვერდის ყველა ელემენტს:
                  
                  *{     
                      background-color: red;
                  }
                   
                  
                  სელექტორთა ჯგუფების სტილიზაცია
                  
                  ზოგჯერ სტილები განისაზღვრება სელექტორთა მთელი ჯგუფისთვის. მაგალითად, თუ გვინდა ყველა სათაურისთვის ხაზგასმის გამოყენება, შესაბამისი სელექტორები უნდა ჩამოვთვალოთ მძიმით გამოყოფილი:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              h1, h2, h3, h4{
                                  text-decoration: underline;
                                  color: red;
                              }
                          </style>
                      </head>
                      <body>
                          <h1>CSS3<h1>
                          <h2>სელექტორები</h2>
                          <h3>სელექტორების ჯგუფი</h3>
                          <p>ტექსტი...</p>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ჯგუფში შეიძლება გაერთიანებული იყოს როგორც ტეგების, ასევე კლასების და იდენტიფიკატორების სელექტორები:
                  
                  h1, #header, .redBlock{   
                      color: red;
                  }`
              },
              {
                  title:"შთამომავლების სელექტორები",
                  data:` 
                  
                  
                  ვებგვერდს გააჩნია რთული ორგანიზაცია, რომლის დროსაც ერთი ელემენტები შეიცავენ სხვა ელემენტებს. ჩასმულ ელემენტებს (რომლებიც სხვა ელემენტის შიგნით არიან ჩასმული) მეორენაირად "შთამომავლებს" უწოდებენ, ხოლო კონტეინერს, რომელიც შეიცავს ამ ელემენტებს - მშობელს.
                  
                  ვთქვათ, ელემენტი body-ს აქვს შემდეგი სახე:
                  
                  <body>
                      <h2>სათაური</h2>
                      <div>
                         <p>ტექსტი</p>
                      </div>
                  </body>
                  body ელემენტის შიგნით გვაქვს სამი ჩასმული ელემენტი: h2, div და p. სამივე მათგანი წარმოადგენს body ელემენტის შთამომავალს.
                  
                  div ელემენტის შიგნით ჩასმულია ერთი ელემენტი p, ამიტომ div-ს მხოლოდ ერთი შთამომავალი გააჩნია.
                  
                  სპეციალური სელექტორების მეშვეობით შეგვიძლია მოვახდინოთ სტილიზაცია მკაცრად განსაზღვრული ელემენტების შთამომავლებისთვის. მაგალითად, შეიძლება გვქონდეს p ელემენტი როგორც ძირითადი ნაწილის შიგნით, ასევე ფუტერში, მაგრამ გვინდოდეს მათთვის სხვადასხვა შრიფტის მინიჭება.
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              #main p{
                                  font-size: 16px;
                              }
                              #footer p{
                                  font-size: 13px;
                              }
                          </style>
                      </head>
                      <body>
                          <div id="main">
                              <p>პირველი აბზაცი</p>
                              <p>მეორე აბზაცი</p>
                          </div>
                          <div id="footer">
                              <p>ფუტერის ტექსტი</p>
                          </div>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ჩასმული ელემენტისთვის სტილის მისაყენებლად გამოიყენება სელექტორი, რომელიც შეიცავს ჯერ მშობელ ელემენტს და შემდეგ ჩასმულს:
                  
                  #main p{
                          font-size: 16px;
                   }
                  ეს სტილი გავრცელდება მხოლოდ იმ p ელემენტებზე, რომლებიც იმყოფებიან main იდენტიფიკატორის მქონე ელემენტის შიგნით.
                  
                  ვნახოთ მეორე მაგალითი:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              li .redLink{
                                  color: red;
                              }
                          </style>
                      </head>
                      <body>
                          <ul>
                              <li>Samsung: <a class="redLink">Galaxy S7 Edge</a></li>
                              <li>Apple: <a>iPhome SE</a></li>
                              <li>LG: <a class="redLink">LG G5</a></li>
                              <li>Microsoft: <a>Lumia 650</a></li>
                          </ul>
                      </body>
                  </html>
                  აქ სტილი გამოიყენება ელემენტებისათვის კლასით "redLink", რომლებიც <li>ელემენტის შიგნითაა:
                  
                  HTML5-ის დოკუმენტი
                  
                  მიაქციეთ ყურადღება, რომ li ელემენტსა და .redLink კლასს შორის ადგილია გამოტოვებული. ადგილის გამოტოვებას დიდი მნიშვნელობა აქვს. იგი მიუთითებს, რომ სტილი ეხება მხოლოდ იმ ელემენტებს, რომელთა კლასია "redLink" და ამასთან იმყოფებიან li ელემენტის შიგნით.
                  
                  თუ მოვაშორებთ ადგილის გამოტოვებას, სელექტორის შინაარსი შეიცვლება:
                  
                   
                  
                  li.redLink{
                      color: red;
                  }
                   
                  
                  ახლა უკვე სტილი ეხება იმ liელემენტებს, რომელთაც აქვთ კლასი "redLink". იგი ეხება ქვემოთ მოცემულ ელემენტს:
                  
                  <li class="redLink">Microsoft: <a>Lumia 650</a></li>
                  მაგრამ არა ამ ელემენტს:
                  
                  <li>LG: <a class="redLink">LG G5</a></li>`
              },
              {
                  title:"შვილი ელემენტების სელექტორები",
                  data:`HTML & CSS სახელმძღვანელო
                  "შვილი" ელემენტების სელექტორები
                  
                  
                  შვილი ელემენტების სელექტორები შთამომავლების სელექტორებისგან განსხვავდება იმით, რომ ეხება მხოლოდ პირველი დონის ჩასმულ ელემენტებს. მაგალითად:
                  
                  <body>
                      <h2>სათაური</h2>
                      <div>
                          <p>ტექსტი</p>
                      </div>
                  </body>
                  მოცემულ მაგალითში body ელემენტისთვის ჩასმულ ელემენტებს წარმოადგენენ h2, div და p, მაგრამ მათგან შვილი ელემენტი მხოლოდ ორია - h2 და div, რადგან იმყოფებიან პირველ დონეზე. 
                  
                  შვილი ელემენტებისადმი მიმართვის სელექტორში გამოიყენება კუთხოვანი ფრჩხილი:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              .article > p{            
                                  color: red;
                              }
                          </style>
                      </head>
                      <body>
                          <div class="article">
                              <p>სტატიის ანოტაცია</p>
                              <div class="content">
                                  <p>სტატიის ტექსტი</p>
                              </div>
                          </div>
                      </body>
                  </html>
                   
                  
                  ბლოკში კლასით "article" არის ორი პარაგრაფი p, მაგრამ სელექტორი .article>p ეხება მხოლოდ იმ პარაგრაფს, რომელიც უშუალოდ .article ბლოკის შიგნითაა:
                  
                  HTML5-ის დოკუმენტი
                  
                  ჩვენ რომ გამოგვეყენებინა სელექტორი ადგილის გამოტოვებით კუთხოვანი ფრჩხილის ნაცვლად, სტილი გავრცელდებოდა ყველა p ელემენტზე, რადგან მივიღებდით სელექტორს შთამომავლებისთვის:
                  
                  .article p{   
                      color: red;
                  }`
              },
              {
                  title:"სელექტორები ერთი დონის ელემენტებისთვის",
                  data:`ერთი დონის ელემენტებს მეორენაირად სიბლინგებს (siblings)  ან დებს უწოდებენ.მაგალითდ:

                  <body>
                      <h2>Заголовок</h2>
                      <div>
                          <p>Текст первого блока</p>
                      </div>
                      <div>
                          <p>Текст второго блока</p>
                      </div>
                  </body>
                   
                  
                  მოცემულ მაგალითში ელემენტი h2 და ორივე ელემენტი div წარმოადგენს ერთი დონის ელემენტებს. ხოლო პარაგრაფის ელემენტები p არ წარმოადგენენ მათთვის იგივე დონის ელემენტებს, რადგან ისინი div ელემენტების შიგნით იმყოფებიან. 
                  
                  ერთ დონეზე მყოფი პირველი მომდევნო ელემენტის სტილიზაციისთვის სელექტორში გამოიყენება + ნიშანი:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              h2+div { color: red; }
                          </style>
                      </head>
                      <body>
                          <h2>სათაური</h2>
                          <div>
                              <p>პირველი ბლოკის ტექსტი</p>
                          </div>
                          <div>
                              <p>მეორე ბლოკის ტექსტი</p>
                          </div>
                      </body>
                  </html>
                   
                  
                  სელექტორი h2+div საშუალებას იძლევა მოხდეს სტილიზაცია იმ div ბლოკის, რომელიც უშუალოდ h2 ელემენტის შემდეგ მოდის:
                  
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ამ სელექტორით div ბლოკის სტილიზაცია ხდება მხოლოდ იმ შემთხვევაში, თუ ის უშუალოდ h2 ელემენტის შემდეგაა. თუ შუაში სხვა ელემენტიც იქნება, სელექტორი div ბლოკს არ შეეხება.
                  
                  თუ ჩვენ გვინდა მოვახდინოთ h2 ელემენტთან ერთ დონეზე მყოფი ყველა div ელემენტის სტილიზაცია, მაშინ +-ს ნაცვლად უნდა გამოვიყენოთ სიმბოლო ~ :
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              h2~div { color: red; }
                          </style>
                      </head>
                      <body>
                          <h2>სათაური</h2>
                          <p>ანოტაცია</p>
                          <div>
                              <p>პირველი ბლოკის ტექსტი</p>
                          </div>
                          <div>
                              <p>მეორე ბლოკის ტექსტი</p>
                          </div>
                      </body>
                  </html>
                   `
              },
              {
                  title:"ფსევდოკლასები",
                  data:`ტეგების (ელემენტების), კლასების და იდენტიფიკატორების გარდა არსებობს ასევე სელექტორები ფსევდოკლასებისთვის, რომლებიც გვაძლევენ დამატებით შესაძლებლობებს. ჩამოვთვალოთ ისინი:

                  :root: საშუალებას გვაძლევს ავირჩიოთ ვებგვერდის ამოსავალი ელემენტი. ყველაზე ნაკლებგამოყენებადი სელექტორია, რადგან ვებგვერდზე ამოსავალი ელემენტი თითქმის ყოველთვის არის <html>
                  :link: გამოიყენება ბმულებისთვის და წარმოადგენს მათ ჩვეულებრივ მდგომარეობაში, ანუ როცა ამ ბმულიდან გადასვლა ჯერ არ განხორციელებულა
                  :visited: გამოიყენება ბმულებისთვის და წარმოადგენს ბმულს, რომლითაც გადასვლა უკვე განხორციელდა
                  :active: გამოიყენება ბმულებისთვის და წარმოადგენს მათ იმ მომენტისთვის, როცა მასზე ხდება დაჭერა
                  :hover: წარმოადგენს ელემენტს იმ მომენტში, როცა მისკენ მიმართულია მაუსი. ძირითადად გამოიყენება ბმულებისთვის, თუმცა შეიძლება გამოვიყენოთ სხვა ელემენტებისთვისაც, მაგალითად პარაგრაფისთვის
                  :focus: წარმოადგენს ელემენტს, რომელსაც მიღებული აქვს ფოკუსი მაუსით დაწერის ან Tab კლავიშით ელემენტზე გადასვლის დროს 
                  :not: შესაძლებლობას გვაძლევს გამოვრიცხოთ რაღაც ელემენტები სიიდან, რომელთათვისაც გამოიყენება სტილი
                  :lang: გვაძლევს საშუალებას ელემენტების სტილიზაციისთვის lang ატრიბუტის მიხედვით
                  :empty: ირჩევს ელემენტებს, რომლებიც ცარიელია, ანუ არ გააჩნიათ ჩასმული ელემენტები
                  ფსევდოკლასების წინ ყოველთვის იწერება ორწერტილი. მაგალითად, მოვახდინოთ ბმულების სტილიზაცია ფსევდოკლასების გამოყენებით:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>ფსევდოკლასები</title>
                          <style>
                              a:link    {color:blue; text-decoration:none}
                              a:visited {color:pink; text-decoration:none}
                              a:hover   {color:red; text-decoration:underline}
                              a:active  {color:yellow; text-decoration:underline}
                              input:hover {border:2px solid red;}
                          </style>
                      </head>
                      <body>
                          <a href="index.html">CSS3-ის სახელმძღვანელო</a>
                          <input type="text" />
                      </body>
                  </html>
                   
                  
                  სელექტორი :not
                  
                  სელექტორი :not საშუალებას გვაძლევს ავირჩიოთ გარკვეული ტიპის ყველა ელემენტი, გარდა :not-ით მონიშნულისა, ანუ გამოვრიცხოთ რაღაც ელემენტები:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              a:not(.blueLink) { color: red; }
                          </style>
                      </head>
                      <body>
                          <a>პირველი ბმული</a><br/>
                          <a class="blueLink">მეორე ბმული</a><br/>
                          <a>მესამე ბმული</a>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  სელექტორი a:not(.blueLink) მიუთითებს, რომ სტილი გამოიყენება ყველა ბმულისთვის, გარდა იმათი, რომელთაც აქვთ კლასი "blueLink". ფრჩხილებში ფსევდოკლასს not  ეთითება ის ელემენტები, რომელთა ამოღებაც გვინდა სტილიდან.
                  
                  ფსევდოკლასი :lang
                  
                  ფსევდოკლასი :lang ირჩევს ელემენტებს  lang ატრიბუტის მიხედვით:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              :lang(ka) {
                                  color: red;
                              }
                          </style>
                      </head>
                      <body>
                          <form>
                             
                              <p lang="ka-GE">მე ვსწავლობ CSS3</p>
                              <p lang="ru-RU">Я изучаю CSS3</p>
                              <p lang="en-US">I study CSS3</p>
                          </form>
                      </body>
                  </html>`
              },
              {
                  title:"ფსევდოკლასები შვილი ელემენტებისთვის",
                  data:`ფსევდოკლასების ცალკე ჯგუფს შეადგენს ფსევდოკლასები შვილი ელემენტებისთვის, რომლებიც საშუალებას გვაძლევენ ავარჩიოთ განსაზღვრული შვილი ელემენტები:

                  :first-child: პირველი შვილი ელემენტი
                  :last-child: ბოლო შვილი ელემენტი
                  :only-child: ელემენტი, რომელიც ერთადერთია კონტეინერში
                  :only-of-type: ელემენტი, რომელიც ერთადერთი ამ ტიპის ელემენტია კონტეინერში
                  :nth-child(n): შვილი ელემენტი, რომელიც არის რიგით n კონტეინერში, მაგალითად, მეორე ელემენტი
                  :nth-last-child(n): შვილი ელემენტი, რომელიც არის რიგით n ბოლოდან კონტეინერში, მაგალითად, ბოლოდან მეორე ელემენტი
                  :nth-of-type(n): განსაზღვრული ტიპის შვილი ელემენტი, რომელიც არის რიგით n კონტეინერში
                  :nth-last-of-type(n): განსაზღვრული ტიპის შვილი ელემენტი, რომელიც არის რიგით n ბოლოდან კონტეინერში
                  ფსევდოკლასი first-child
                  
                  გამოვიყენოთ ფსევდოკლასი :first-child ბლოკში პირველი ბმულისთვის:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              a:first-child{            
                                  color: red;
                              }
                          </style>
                      </head>
                      <body>
                          <h3>პლანშეტები</h3>
                          <div>
                              <a>Microsoft Surface Pro 4</a><br/>
                              <a>Apple iPad Pro</a><br/>
                              <a>ASUS ZenPad Z380KL</a>
                          </div>
                          <h3>სმარტფონები</h3>
                          <div>
                              <p>ტოპ-სმარტფონები 2016</p>
                              <a>Samsung Galaxy S7</a><br/>
                              <a>Apple iPhone SE</a><br/>
                              <a>Huawei P9</a>
                          </div>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  სელექტორი a:first-child-ით განსაზღვრული სტილი გამოიყენება იმ ბმულებისთვის, რომელიც პირველი ელემენტია ნებისმიერი კონტეინერის შიგნით.
                  
                  პირველ ბლოკში ბმული პირველი ელემენტია, ამიტომ მასზე ვრცელდება სელექტორით განსაზღვრული სტილი. ხოლო მეორე ბლოკში ბმული არაა პირველი ელემენტი (პირველი ელემენტია პარაგრაფი), ამიტომ მასზე სტილი არ ვრცელდება.
                  
                  ფსევდოკლასი last-child
                  
                  გამოვიყენოთ ფსევდოკლასი :last-child ბლოკში ბოლო ბმულისთვის:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              a:last-child{            
                                  color: blue;
                              }
                          </style>
                      </head>
                      <body>
                          <h3>სმარტფონები</h3>
                          <div>
                              <a>Samsung Galaxy S7</a><br/>
                              <a>Apple iPhone SE</a><br/>
                              <a>Huawei P9</a>
                          </div>
                          <h3>პლანშეტები</h3>
                          <div>
                              <a>Microsoft Surface Pro 4</a><br/>
                              <a>Apple iPad Pro</a><br/>
                              <a>ASUS ZenPad Z380KL</a>
                              <p>2016 წლის მონაცემები</p>
                          </div>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ფსევდოკლასი :last-child-ით განსაზღვრული სტილი გამოიყენება იმ ბმულებისთვის, რომელიც ბოლო ელემენტია ნებისმიერი კონტეინერის შიგნით.
                  
                  პირველ ბლოკში ბმული ბოლო ელემენტია, ამიტომ მასზე ვრცელდება სელექტორით განსაზღვრული სტილი. ხოლო მეორე ბლოკში ბმული არაა ბოლო ელემენტი (ბოლო ელემენტია პარაგრაფი), ამიტომ მასზე სტილი არ ვრცელდება.
                  
                  სელექტორი only-child
                  
                  სელექტორი :only-child გამოიყენება იმ ელემენტებისათვის, რომლებიც ერთადერთი შვილი ელემენტია თავის კონტეინერში:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                          p:only-child{
                              color:red;
                          }
                          </style>
                      </head>
                      <body>
                          <h2>სათაური</h2>
                          <div>
                              <p>ტექსტი1</p>
                          </div>
                          <div>
                              <p>ტექსტი2</p>
                              <p>ტექსტი3</p>
                          </div>
                          <div>
                              <p>ტექსტი4</p>
                          </div>
                      </body>
                  </html>
                  მოცემულ მაგალითში ტექსტი1 და ტექსტი4 წარმოადგენენ ერთადერთ ელემენტს თავის კონტეინერში, ამიტომ მათზე ვრცელდება ფსევდოკლასით განსაზღვრული სტილი, ხოლო ტექსტი2 და ტექსტი3 ერთიდაიმავე კონტეინერშია მოთავსებული, შესაბამისად არ არიან ერთადერთნი თავის კონტეინერში და მათზე სტილი არ ვრცელდება.
                  
                  HTML5-ის დოკუმენტი
                  
                  ფსევდოკლასი only-of-type
                  
                  ფსევდოკლასი :only-of-type არჩევს ელემენტებს, რომლებიც ერთადერთი ამ ტიპის ელემენტია კონტეინერში. სხვა ტიპის ელემენტები იმავე კონტეინერში შეიძლება იყოს ნებისმიერი რაოდენობით:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                          span:only-of-type{        
                              color: green;   /* зеленый цвет */
                          }
                          p:only-of-type{        
                              color: red; /* წითელი */
                          }
                          div:only-of-type{        
                              color: blue;    /* ლურჯი */
                          }
                          </style>
                      </head>
                      <body>
                          <div>
                              სათაური
                          </div>
                          <p>ერთადერთი პარაგრაფი და <span>ელემენტი span</span></p>
                          <div>
                              ფუტერი
                          </div>
                      </body>
                  </html>
                  თუმცა სტილი განსაზღვრულია divელემენტებისთვის, იგი არ იქნება გამოყენებული, ვინაიდან body ელემენტის შიგნით რამდენიმე div ელემენტია. სამაგიეროდ, body-ში არის ერთადერთი პარაგრაფი და მასზე გავრცელდება p:only-of-type სელექტორით განსაზღვრული სტილი. ასევე, p პარაგრაფში არის მხოლოდ ერთი ელემენტი span, შესაბამისად მასზე გავრცელდება შესაბამისი სტილი.
                  
                  HTML5-ის დოკუმენტი
                  
                  
                  
                  ფსევდოკლასი nth-child
                  
                  ფსევდოკლასი :nth-child საშუალებას  იძლევა მოხდეს ყოველი მეორე, ყოველი მესამე და ა. შ. ან კენტ ან ლუწ ადგილზე მყოფი ელემენტის სტილიზაცია. მაგალითად, მოვახდინოთ ცხრილის კენტი და ლუწი სტრიქონების სტილიზაცია:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>სელექტორები</title>
                          <style>
                              tr:nth-child(odd) { background-color: #32F39F; }
                              tr:nth-child(even) { background-color: #F5EE31; }
                          </style>
                      </head>
                      <body>
                          <h3>სმარტფონები</h3>
                          <table>
                              <tr><td>Samsung</td><td>Galaxy S7 Edge</td><td>60000</td></tr>
                              <tr><td>Apple</td><td>iPhone SE</td><td>39000</td></tr>
                              <tr><td>Microsoft</td><td>Lumia 650</td><td>13500</td></tr>
                              <tr><td>Alcatel</td><td>Idol S4</td><td>30000</td></tr>
                              <tr><td>Huawei</td><td>P9</td><td>60000</td></tr>
                              <tr><td>HTC</td><td>HTC 10</td><td>50000</td></tr>
                              <tr><td>Meizu</td><td>Pro 6</td><td>40000</td></tr>
                              <tr><td>Xiaomi</td><td>Mi5</td><td>35000</td></tr>
                          </table>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  კენტი ელემენტების სტილიზაციისთვის სელექტორს პარამეტრად გადაეცემა odd:
                  
                  tr:nth-child(odd){background-color: #32F39F;}
                  ლუწი ელემენტების სტილიზაციისთვის სელექტორს პარამეტრად გადაეცემა even:
                  
                  tr:nth-child(even){background-color: #F5EE31;}
                  ასევე პარამეტრად შეიძლება გადავცეთ რიგითი ნომერი:
                  
                  tr:nth-child(3){background-color: #bbb;}
                  ამ შემთხვევაში ხდება რიგით მესამე ელემენტის სტილიზაცია.
                  
                  კიდევ ერთი შესაძლებლობაა ამ ფსევდოკლასის გამოყენების - შეგვიძლია პარამეტრად გადავცეთ ფორმულა n-ის შემცველობით:
                  
                  tr:nth-child(2n+1){background-color: #bbb;}
                  ამ შემთხვევაში სტილიზაცია ხდება იმ ელემენტების, რომელთა რიგით ნომერსაც მივიღებთ n-ის ნაცვლად მთელი რიცხვების ჩასმით დაწყებული 0-დან, ანუ 2*0+1=1,2*1+1=3,2*2+1=5 და ა. შ. ე.ი. მოხდება სტილიზაცია პირველი, მესამე, მეხუთე, მეშვიდე და ა. შ. ელემენტების.
                  
                  თუ ჩენ გვინდა ყოველი მესამე ელემენტის სტილიზაცია, დაწყებული მე-2-დან, უნდა დავწეროთ:
                  
                  tr:nth-child(3n+2){background-color: #bbb;}
                  HTML5-ის დოკუმენტი
                  
                  ფსევდოკლასს :nth-last-child გააჩნია ზუსტად იგივე ფუნქციონალი, ოღონდ ათვლა იწყება ბოლოდან:
                  
                  tr:nth-last-child(2){background-color: #81F760;}
                  tr:nth-last-child(2n+1){background-color: #83E3F8;}`
              },
              {
                  title:"ფორმის ფსევდოკლასები",
                  data:`რიგი ფსევდოკლასებისა გამოიყენება ფორმის ელემენტებთან სამუშაოდ:

                  :enabled: ელემენტები, რომლებიც ხელმისაწვდომია (ანუ რომელთაც არა აქვთ ატრიბუტი disabled)
                  :disabled: ელემენტები, რომლებიც არაა ხელმისაწვდომი (ანუ რომელთაც აქვთ ატრიბუტი disabled)
                  :checked: ელემენტები, რომელთაც აქვთ ატრიბუტი checked (ალმებისა და გადამრთველებისთვის (რადიოღილაკებისთვის))
                  :default: ელემენტი, რომელიც არის უპირატესი
                  :valid: ელემენტი, რომელიც გადის HTML5 ვალიდაციას
                  :invalid: ელემენტი, რომელიც ვერ გადის HTML5 ვალიდაციას
                  :in-range: ელემენტი, რომლის მნიშვნელობა გარკვეულ დიაპაზონშია (გამოიყენება ელემენტისთვის მცოცავი ველი)
                  :out-of-range: ელემენტები, რომელთა მნიშვნელობა გარკვეულ დიაპაზონს გარეთაა
                  :required: ელემენტები, რომელთაც მინიჭებული აქვთ ატრიბუტი required
                  :optional: ელემენტები, რომელთაც არა აქვთ მინიჭებული ატრიბუტი required
                  ფსევდოკლასები enabled და disabled
                  
                  ფსევდოკლასები enabled და disabled გამოიყენება იმის მიხედვით, აქვს თუ არა ელემენტს მინიჭებული ატრიბუტი disabled:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>ფსევდოკლასები</title>
                          <style>
                              :enabled {
                                  border: 2px blue solid;
                                  color: green;
                              }
                              :disabled {
                                  border: 2px black solid;
                                  color: red;
                              }
                          </style>
                      </head>
                      <body>
                          <p><input type="text" value="Enabled" /></p>
                          <p><input type="text" disabled value="Disabled" /></p>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ფსევდოკლასი checked
                  
                  ფსევდოკლასი :checked გამოიყენება ფორმის იმ ელემენტებისათვის, რომელთაც აქვთ ატრიბუტი checked:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>ფსევდოკლასები</title>
                          <style>
                              :checked + span {
                                  color: red;
                                  font-weight: bold;            }
                          </style>
                      </head>
                      <body>
                              <h2>აირჩიეთ ტექნოლოგია</h2>
                              <p>
                                  <input type="checkbox" checked name="html5"/><span>HTML5</span>
                              </p>
                              <p>
                                  <input type="checkbox" name="dotnet"/><span>.NET</span>
                              </p>
                              <p>
                                  <input type="checkbox" name="java"/><span>Java</span>
                              </p>
                              
                              <h2>მიუთითეთ სქესი</h2>
                              <p>
                                  <input type="radio" value="man" checked name="gender"/><span>კაცი</span>
                              </p>
                              <p>
                                  <input type="radio" value="woman" name="gender"/><span>ქალი</span>
                              </p>
                      </body>
                  </html>
                  სელექტორი :checked+span საშუალებას გვაძლევს ავირჩიოთ span ელემენტი, რომელიც მოსდევს მონიშნულ ელემენტს:
                  
                  HTML5-ის დოკუმენტი
                  
                  ფსევდოკლასი default
                  
                  ფსევდოკლასი :default განკუთვნილია იმ ელემენტის სტილიზაციისთვის, რომელიც უპირატესია ფორმაზე. როგორც წესი, ასეთ ელემენტს ფორმაზე წარმოადგენს გაგზავნის ღილაკი:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>ფსევდოკლასები</title>
                          <style>
                              :default {
                                  border: 2px solid red;
                              }
                          </style>
                      </head>
                      <body>
                          <form>
                              <input name="login"/>
                              <input type="submit" value="შესვლა" />
                          </form>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  
                  
                  ფსევდოკლასები valid და invalid
                  
                  ფსევდოკლასები valid და invalid ახდენენ ელემენტების სტილიზაციას იმის მიხედვით, გადიან ისინი ვალიდაციას თუ არა:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>ფსევდოკლასები</title>
                          <style>
                              input:invalid {
                                  border: 2px solid red;
                              }
                              input:valid {
                                  border: 2px solid green;
                              }
                          </style>
                      </head>
                      <body>
                          <form>
                              <p><input type="text" name="login" placeholder="მომხმარებელი" required /></p>
                              <p><input type="password" name="password" placeholder="პაროლი" required /></p>
                              <input type="submit" value="შესვლა" />
                          </form>
                      </body>
                  </html>
                   
                  
                  HTML5-ის დოკუმენტი
                  
                  ფსევდოკლასები in-range და out-of-range
                  
                  ფსევდოკლასები in-range და out-of-range გამოიყენება იმის მიხედვით, არის თუ არა ელემენტის მნიშვნელობა გარკვეულ დიაპაზონში ან მის გარე. ეს პირველ რიგში ეხება ელემენტს <input type="number" >.
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>ფსევდოკლასები</title>
                          <style>
                              :in-range {
                                  border: 2px solid green;
                              }
                              :out-of-range {
                                  border: 2px solid red;
                              }
                          </style>
                      </head>
                      <body>
                          <form>
                              <p>
                                  <label for="age">თქვენი ასაკი:</label>
                                  <input type="number" min="1" max="100" value="10" id="age" name="age"/>
                              </p>
                              <input type="submit" value="შესრულება" />
                          </form>
                      </body>
                  </html>
                  აქ ატრიბუტები min და max განსაზღვრავს დიაპაზონს, რომელშიც უნდა იყოს მნიშვნელობა:
                  
                  HTML5-ის დოკუმენტი
                  
                  ფსევდოკლასები required და optional
                  
                  ფსევდოკლასები required და optional გამოიყენება იმის მიხედვით, აქვს თუ არა ელემენტს ატრიბუტი required:
                  
                  <!DOCTYPE html>
                  <html>
                      <head>
                          <meta charset="utf-8">
                          <title>ფსევდოკლასები</title>
                          <style>
                              :optional {
                                  border: 2px solid blue;
                              }
                              :required {
                                  border: 2px solid red;
                              }
                          </style>
                      </head>
                      <body>
                          <form>
                              <p>
                                  <label for="login">მომხმარებელი:</label>
                                  <input type="text" id="login" name="login" required />
                              </p>
                              <p>
                                  <label for="password">პაროლი:</label>
                                  <input type="password" id="password" name="password" required />
                              </p>
                              <p>
                                  <label for="name">სახელი:</label>
                                  <input type="text" id="name" name="name"/>
                              </p>
                              <input type="submit" value="რეგისტრაცია" />
                          </form>
                      </body>
                  </html>`
              },
              {
                title:"ფსევდოელემენტები",
                data:`ფსევდოელემენტები იძლევა დამატებით შესაძლებლობებს ვებგვერდის ელემენტების სტილიზაციისთვის და ჰგვანან ფსევდოკლასებს. ფსევდოელემენტებია:

                ::first-letter: იძლევა ტექსტის პირველი ასოს სტილიზაციის საშუალებას
                
                ::first-line: ახდენს ტექსტის პირველი სტრიქონის სტილიზაციას
                
                ::before: ამატებს შეტყობინებას (ტექსტს) ელემენტის წინ
                
                ::after: ამატებს შეტყობინებას (ტექსტს) ელემენტის შემდეგ
                
                ::selection: მომხმარებლის მიერ მონიშნული ტექსტის სტილიზაცია
                
                CSS2-ში ფსევდოელემენტების წინ, ისევე როგორც ფსევდოკლასების წინ იწერებოდა ერთი ორწერტილი, CSS3-ში ფსევდოელემენტების წინ იწერება ორი ორწერტილი, რათა გაემიჯნათ ფსევდოკლასებისგან. თუმცა ძველი ბრაუზერების თავსებადობისთვის დასაშვებია ერთი ორწერტილის გამოყენებაც - :before.
                
                ტექსტის სტილიზაციისთვის გამოვიყენოთ first-letter и first-line:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ფსევდოელემენტები</title>
                        <style>
                            ::first-letter { color:red; font-size: 25px; }
                            ::first-line { font-size: 20px; }
                        </style>
                    </head>
                    <body>
                        <p>ყმაწვილი კაცი... აღვწეროთ მისი პორტრეტი ერთი კალმის მოსმით.
                            წარმოიდგინეთ დონ კიხოტი, ოღონდ 18 წლისა; დონ კიხოტი მსუბუქად
                            ჩაცმული, უჯავშნოდ და უმუზარადოდ, დონ კიხოტი ლურჯი შალის ქურთუკით,
                            რომელიც ისე გახუნებულიყო, რომ რაღაც უცნაური, მომწვანო ცისფერი
                            მიეღო, წარმოიდგინეთ გრძელი და შავგვრემანი პირისახე; ამოწეული
                            ყვრიმალი — ცხადი ნიშანი ცბიერებისა; ყბები მეტისმეტად განვითარებული —
                            ამ ნიშნით გამოირჩევა გასკონელი, თუნდ ბერეტიც არ ეხუროს, ჩვენს გმირს კი
                            ეხურა სწორედ ასეთი ბერეტი, რომელიც რაღაც ფრთით დაემშვენებინა. </p>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                გამოვიყენოთ ფსევდოელემენტები before და after:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ფსევდოელემენტები</title>
                        <style>
                            .warning::before{ content: "ყურადღება! "; font-weight: bold; }
                            .warning::after { content: " იყავით ფრთხილად!"; font-weight: bold;}
                        </style>
                    </head>
                    <body>
                        <p><span class="warning">ნუ შეყოფთ ენას დენის წყაროში.</span></p>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                აქ ფსევდოელემენტები გამოყენებულია ელემენტებისთვის კლასით "warning". ორივე ფსევდოელემენტს გააჩნია თვისება "content" რომელშიც ინახება დასამატებელი ტექსტი. ასევე ორივე ელემენტს გამუქებული აქვს შრიფტი, რისთვისაც გამოყენებულია თვისება font-weight: bold;.
                
                გამოვიყენოთ ფსევდოელემენტი selection მონიშნული ტექსტის სტილიზაციისთვის:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ფსევდოელემენტები</title>
                        <style>
                            ::selection {
                                color: white;
                                background-color: #DD0F0F;
                            }
                        </style>
                    </head>
                    <body>
                        <p>ფსევდოელემენტები CSS3-ში იძლევა ტექსტის სტილიზაციის საშუალებას.</p>
                    </body>
                </html>`
            },
            {
                title:"ატრიბუტთა სელექტორები",
                data:`ელემენტთა სელექტორების გარდა შეიძლება გამოვიყენოთ სელექტორები მათი ატრიბუტებისთვის. მაგალითად, ვებგვერდზე გვაქვს რამდენიმე ელემენტი input, მაგრამ გვინდა მხოლოდ ტექსტური ელემენტების ჩარჩოს ფერი იყოს წითლი. სწორედ ამ დროს გამოიყენება სელექტორები ატრიბუტებისთვის:

                input[type="text"]{    
                    border: 2px solid red;
                }
                ელემენტის შემდეგ კვადრატულ ფრჩხილებში მოდის ატრიბუტი და მისი მნიშვნელობა. ამ შემთხვევაში ყველა ტექსტურ ველს ექნება წითელი ჩარჩო 2 პიქსელი სისქის:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ატრიბუტთა სელექტორები</title>
                        <style>
                            input[type="text"]{
                                border: 2px solid red;
                            }
                        </style>
                    </head>
                    <body>
                        <p><input type="text" id="login" /></p>
                        <p><input type="password" id="password" /></p>
                        <input type="submit" value="გაგზავნა" />
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                ატრიბუტების სელექტორის გამოყენება შეიძლება არა მხოლოდ ელემენტებისთვის, არამედ კლასებისა და იდენტიფიკატორებისთვისაც. მაგალითად:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>ატრიბუტთა სელექტორები</title>
                        <style>
                            .link[href="http://apple.com"]{            
                                color: red;
                            }
                        </style>
                    </head>
                    <body>
                        <a class="link" href="http://microsoft.com">Microsoft</a> |
                        <a class="link" href="https://google.com">Google</a> |
                        <a class="link" href="http://apple.com">Apple</a>
                    </body>
                </html>
                 
                
                HTML5-ის დოკუმენტი
                
                სპეციალური სიმბოლოებით სესაძლებელია მოხდეს ატრიბუტთა მნიშვნელობის დაკონკრეტება. მაგალითად, სიმბოლო ^ საშუალებას იძლევა ავარჩიოთ ყველა ატრიბუტი, რომელიც იწყება განსაზღვრული ტექსტით. მაგალითად, ვთქვათ გვინდა მოვახდინოთ სტილიზაცია ყველა ბმულის, რომელიც იყენებს https პროტოკოლს, ანუ იწყება "https://"-ით. ამისთვის გამოვიყენებთ შემდეგ სელექტორს:
                
                a[href^="https://"]{   
                    color: red;
                }
                თუ ატრიბუტის მნიშვნელობა უნდა ბოლოვდებოდეს გარკვეული ტექსტით, უნდა გამოვიყენოთ სიმბოლო $. მაგალითად, გვინდა ავირჩიოთ ყველა სურათი გაფართოებით .jpg. ამისთვის უნდა მოვძებნოთ ყველა ელემენტი, რომლის ატრიბუტი src ბოლოვდება ".jpg"-ით:
                
                img[src$=".jpg"]{      
                    width: 100px;
                }
                კიდევ ერთი სიმბოლო * საშუალებას გვაძლევს ავარჩიოთ ის ელემენტები, რომელთა ატრიბუტის მნიშვნელობა შეიცავს გარკვეულ ტექსტს (არა აქვს მნიშვნელობა თავში, ბოლოში თუ შუაში):
                
                a[href*="microsoft"]{   
                    color: red;
                }   `
            },
            {
                title:"სტილების მემკვიდრეობითობა",
                data:`სტილების განსაზღვრის გასამარტივებლად სტილებს გააჩნია მემკვიდრეობითობა. ჩასმულ ელემენტებს შეუძლიათ მიიღონ მათი მშობელი ელემენტის სტილები. ვთქვათ ვებგვერდზე გვაქვს პარაგრაფი და სათაური, რომელთაც უნდა ჰქონდეთ წითელი ფერი. ჩვენ შეგვიძლია თითოეულს ცალ-ცალკე განვუსაზღვროთ შრიფტის ფერი:

                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>სტილების მემკვიდრეობითობა</title>
                        <style>
                            p {color: red;}
                            h2 {color: red;}
                        </style>
                    </head>
                    <body>
                        <h2>სტილების მემკვიდრეობითობა</h2>
                        <p>ტექსტი სტილების მემკვიდრეობითობაზე</p>
                    </body>
                </html>
                მაგრამ ვინაიდან ორივე ეს ელემენტი არის ელემენტ body-ს შიგნით, მათ შეუძლიათ ბევრი სტილი მემკვიდრეობით მიიღონ body-სგან:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>სტილების მემკვიდრეობითობა</title>
                        <style>
                            body {color: red;}
                        </style>
                    </head>
                    <body>
                        <h2>სტილების მემკვიდრეობითობა</h2>
                        <p>ტექსტი სტილების მემკვიდრეობითობაზე</p>
                    </body>
                </html>
                მივიღებთ იგივე შედეგს.
                
                თუ არ გვინდა, რომ რომელიმე ელემენტმა მემკვიდრეობით მიიღოს სტილი მშობლისგან, შეგვიძლია ამ ელემენტს თვითონ განვუსაზღვროთ სტილი:
                
                     body {color: red;}
                     p {color: green;}
                მრავალდონიანი ჩასმული ელემენტების შემთხვევაში სტილის მემკვიდრეობით მიღება ხდება მხოლოდ უშუალო მშობლისგან:
                
                 
                
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>სტილების მემკვიდრეობითობა</title>
                    <style>
                        body {
                            color: red;
                        }
                        div {
                            color: green;
                        }
                    </style>
                </head>
                <body>
                    <div>
                        <h2>სტილების მემკვიდრეობითობა</h2>
                        <p>ტექსტი სტილების მემკვიდრეობითობაზე</p>
                    </div>
                    <p>Copyright © MyCorp.com</p>
                </body>
                </html>
                 
                
                რადგან div ელემენტისთვის ცალკეა განსაზღვრული სტილი, მასში შემავალი ელემენტები მისგან იღებენ მემკვიდრეობით სტილს, ხოლო ელემენტი p რომელიც უშუალოდ body-ს შიგნითაა, იგი სტილს მემკვიდრეობით body-სგან ღებულობს:
                
                HTML5-ის დოკუმენტი
                
                მაგრამ CSS-ის ყველა თვისებისთვის არ მოქმედებს მემკვიდრეობითობის პრინციპი. მემკვიდრეობით არ გადაეცემა ტექსტის დაშორებები (margin, padding) და ჩარჩოები (border).
                
                გარდა ამისა ბრაუზერები, იმ შემთხვევაში, თუ სპეციალურად არაა განსაზღვრული, ცალკეული ელემენტების მიმართ იყენებენ განსაზღვრულ სტილებს. მაგალითად, სათაურებს (h1-h6) აქვთ გარკვეული სიმაღლე და ა. შ.`
            },
            {
                title:"სტილების კასკადურობა",
                data:`როცა ელემენტისთვის გამოიყენება ერთი სტილი, ყველაფერი შედარებით მარტივია. მაგრამ როცა ერთ ერთ ელემენტზე რამდენიმე სტილი მოქმედებს, ისმება კითხვა, რომელ სტილს მიიღებს ელემენტი?

                CSS-ში მოქმედებს კასკადურობის მექანიზმი, როგორც წესების ერთობლიობა, რომელიც განსაზღვრავს ერთი და იმავე ელემენტზე ბევრი სტილის მოქმედების თანმიმდევრობას.
                
                ვნახოთ მაგალითი:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>სტილების კასკადურობა</title>
                        <style>
                            .redLink {color: red;}  /* ტექსტის წითელი ფერი */
                            .footer a {font-weight: bold;}  /* შრიფტის გამუქება */
                            a {text-decoration: none;}  /*ხაზგასმის მოხსნა */
                        </style>
                    </head>
                    <body>
                        <p class="footer">დამატებითი ინფორმაციისთვის გადადით ბმულზე:
                            <a class="redLink" href="css3.html">CSS3-ის საფუძვლები</a></p>
                    </body>
                </html>
                CSS-ში განსაზღვრულია სამი სტილი და სამივე მიესადაგება ბმულს. თუ ვებგვერდის ელემენტს მიესადაგება რამდენიმე სტილი, რომელიც ერთმანეთთან კონფლიქტში არ მოდის, ისინი ერთიანდება ერთ სტილში. მოცემულ შემთხვევაში სტილები ერთმანეთთან კონფლიქტში არ მოდის, შესაბამისად ბმულზე იმოქმედებს სამივე:
                
                HTML5-ის დოკუმენტი
                
                თუ სტილები კონფლიქტში მოდიან ერთმანეთთან, ამ შემთხვევაში მოქმედებს თითოეული სტილის მნიშვნელობის განსაზღვრის რთული სისტემა. ყველა ეს წესი აღწერილია CSS-ის სპეციფიკაციაში, რომლის სანახავად შეგიძლიათ გადახვიდეთ ბმულზე Calculating a selectors specificity. მოკლედ გავარჩიოთ ეს წესი.
                
                ელემენტის სტილის განსაზღვრისთვის გამოიყენება მრავალი სელექტორი. თითოეულის მნიშვნელობა ელემენტისთვის განისაზღვრება ქულებით. რაც უფრო მეტი ქულა აქვს სელექტორს, მით უფრო მეტია მისი მნიშვნელობა ელემენტისთვის და მას გააჩნია უფრო მაღალი პრიორიტეტი სხვა სელექტორებით განსაზღვრულ სტილებთან შედარებით.
                
                ტეგის სელექტორის მნიშვნელობა განისაზღვრება 1 ქულით
                კლასის, ატრიბუტის და ფსევდოკლასის მნიშვნელობა განისაზღვრება 10 ქულით
                იდენტიფიკატორის სელექტორის მნიშვნელობა განისაზღვრება 100 ქულით
                ელემენტში ჩაშენებული ინლინე-სტილის მნიშვნელობა განისაზღვრება 1000 ქულით
                მაგალითად:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>სტილების კასკადურობა</title>
                        <style>
                            #index {color: navy;}   /* ტექსტის მუქი ლურჯი ფერი */
                            .redLink {color: red; font-size: 20px;} /* ტექსტის ფერი წითელი და შრიფტის ზომა 20 პიქსელი */
                            a {color: black; font-weight: bold;}    /* ტექსტის შავი ფერი და გამუქება */
                        </style>
                    </head>
                    <body>
                        <a id="index" class="redLink" href="index.php">CSS3-ის საფუძვლები</a>
                    </body>
                </html>
                მოცემულ მაგალითში ბმულისთვის განსაზღვრულია ერთდროულად 3 სტილი. მათ შორის 2 ერთმანეთთან კონფლიქტში არაა:
                
                font-size: 20px;
                font-weight: bold;
                ვინაიდან განსაზღვრულია მხოლოდ ერთ სტილში, შესაბამისად ისინი შეჯამდება და ორივე შეცვლის ბმულის სტილს.
                
                მაგრამ სამივე სტილი შეიცავს ტექსტის სხვადასხვა ფერს, შესაბამისად ისინი ერთმანეთთან კონფლიქტში მოდიან. მაგრამ ვინაიდან იდენტიფიკატორის სტილის მნიშვნელობა ელემენტისთვის უფრო მაღალია, ვიდრე კლასის და ტეგის სტილის, საბოლოოდ ელემენტს ექნება მუქი ლურჯი ფერი:
                
                #index {color: navy;} 
                თუ სელექტორი შედგენილია, მაშინ ხდება ქულების დათვლა:
                
                <!DOCTYPE html>
                <html>
                    <head>
                        <meta charset="utf-8">
                        <title>სტილების კასკადურობა</title>
                        <style>
                            a {font-size: 18px;}
                            .nav li a {color: red;}
                            #menu a {color: navy;} 
                            .nav .menuItem {color: green;}
                            a.menuItem:not(.newsLink) {color: orange;}
                            div ul li a {color: gray; }
                        </style>
                    </head>
                    <body>
                        <div id="menu">
                            <ul class="nav">
                                <li><a class="menuItem">მთავარი</a></li>
                                <li><a class="menuItem">ფორუმი</a></li>
                                <li><a class="menuItem">ბლოგი</a></li>
                                <li><a class="menuItem">საიტის შესახებ</a></li>
                            </ul>
                        </div>
                    </body>
                </html>
                CSS-ში განსაზღვრულია ხუთი სტილი, რომლებიც ბმულის ფერს ადგენს. იმისათვის, რომ გავიგოთ, რა ფერი ექნება ბმულს, შევადგინოთ ცხრილი:
                
                სელექტორი	იდენტიფიკატორი	კლასი	ტეგი	ჯამი
                .nav li a	0	1	2	12
                #menu a	1	0	1	101
                .nav .menuItem	0	2	0	20
                a.menuItem:not(.newsLink)	0	2	1	21
                div ul li a	0	0	4	4
                როგორც ცხრილიდან ჩანს, სელექტორს #menu a აქვს ყველაზე მაღალი ქულა 101, შესაბამისად ბმულის ფერსაც ის განსაზღვრავს და იქნება მუქი ლურჯი.
                
                წესი !important
                
                CSS-ში არის საშუალება სელექტორების მნიშვნელობებს ავუაროთ გვერდი. ამისთვის არსებობს ბრძანება !important:
                
                a {font-size: 18px; color: red !important;}
                #menu a {color: navy;}
                ასეთ დროს მიუხედავად სხვა სელექტორის არსებობისა უფრო მაღალი ქულებით, გამოიყენება წითელი ფერი, რადგანაც მონიშნულია ბრძანებით  !important.`
            },
           
            ]
        },
        {
            title:"თავი 6. CSS3-ის საფუძვლები. თვისებები",
            content:[
                {
                    title:"ფერი CSS-ში",
                    data:``
                },
                {
                  title:"შრიფტების სტილიზაცია",
                  data:``
              },
              {
                  title:"გარე შრიფტები",
                  data:``
              },
              {
                  title:"შრიფტის ზომა",
                  data:``
              },
              {
                  title:"ტექსტის ფორმატირება",
                  data:``
              },
              {
                  title:"აბზაცების სტილიზაცია",
                  data:``
              },
              {
                  title:"სიების სტილიზაცია",
                  data:``
              },
              {
                  title:"ცხრილების სტილიზაცია",
                  data:``
              },{
                title:"ბლოკისებური მოდელი",
                data:``
            },{
                title:"გარე დაშორებები (margin)",
                data:``
            },{
                title:"შიდა დაშორებები (padding)",
                data:``
            },{
                title:"ჩარჩოები",
                data:``
            },{
                title:"ელემენტის ზომები",
                data:``
            },{
                title:"ელემენტის ფონი",
                data:``
            },{
                title:"ელემენტის ჩრდილი",
                data:``
            },{
                title:"ელემენტის კონტურები",
                data:``
            },{
                title:"თვისება float",
                data:``
            },{
                title:"ელემენტების გადახვევა",
                data:``
            },
            {
                title:"წრფივი გრადიენტი",
                data:``
            },
            {
                title:"რადიალური გრადიენტი",
                data:``
            },
            



              
            ]
        },
        {
            title:"თავი 7. გვერდის მაკეტის შექმნა",
            content:[
                {
                    title:"ბლოკისებური მაკეტი. 1-ლი ნაწილი",
                    data:``
                },
                {
                  title:"ბლოკისებური მაკეტი. მე-2 ნაწილი",
                  data:``
              },
              {
                  title:"ჩასმული მცურავი ბლოკები",
                  data:``
              },
              {
                  title:"სვეტების გათანაბრება სიმაღლეში",
                  data:``
              },
              {
                  title:"თვისება display",
                  data:``
              },
              {
                  title:"ნავიგაციის პანელის შექმნა",
                  data:``
              },
              {
                  title:"მცურავი ელემენტების გასწორება",
                  data:``
              },
              {
                  title:"მარტივი მაკეტის შექმნა",
                  data:``
              },
              {
                  title:"პოზიციონირება",
                  data:``
              },
              {
                title:"ფიქსირებული პოზიცია",
                data:``
            }
           
            ]
        },
        {
            title:"	თავი 8. ტრანსფორმირება, გადასვლები და ანიმაციები",
            content:[
                {
                    title:"ტრანსფორმირება",
                    data:``
                },
                {
                  title:"გადასვლები",
                  data:``
              },
              {
                  title:"ანიმაცია",
                  data:``
              },
          
            ]
        },
        {
            title:"თავი 9. ადაპტირებული დიზაინი",
            content:[
                {
                    title:"შესავალი ადაპტირებულ დიზაინში",
                    data:``
                },
                {
                  title:"მეტატეგი Viewport",
                  data:``
              },
              {
                  title:"Media Query CSS-ში",
                  data:``
              },
             
            ]
        },
        {
            title:"თავი 10. მულტიმედია",
            content:[
                {
                    title:"ვიდეო",
                    data:``
                },
                {
                  title:"აუდიო",
                  data:``
              },
              {
                  title:"Media API. ვიდეოს მართვა JavaScript-დან",
                  data:``
              },
              
            ]
        },
        {
            title:"თავი 11. Flexbox",
            content:[
                {
                    title:"რა არის Flexbox. Flex Container",
                    data:``
                },
                {
                  title:"მიმართულება - flex-direction",
                  data:``
              },
              {
                  title:"flex-wrap",
                  data:``
              },
              {
                  title:"flex-flow. ელემენტების წესრიგი",
                  data:``
              },
              {
                  title:"ელემენტების გასწორება. justify-content",
                  data:``
              },
              {
                  title:"ელემენტების გასწორება. align-items და align-self",
                  data:``
              },
              {
                  title:"სტრიქონებისა და სვეტების გასწორება. align-content",
                  data:``
              },
              {
                  title:"ელემენტების მართვა. flex-basis, flex-shrink და flex-grow",
                  data:``
              },
              {
                title:"მრავალსვეტიანი დიზაინი Flexbox-ის მეშვეობით",
                data:``
            },
            {
                title:"ვებგვერდის მაკეტი Flexbox-ზე",
                data:``
            },
          
            ]
        },
        {
            title:"თავი 12. Grid Layout",
            content:[
                {
                    title:"რა არის Grid Layout. Grid Container",
                    data:``
                },
                {
                  title:"სტრიქონები და სვეტები",
                  data:``
              },
              {
                  title:"ფუნქცია repeat და თვისება grid",
                  data:``
              },
              {
                  title:"სტრიქონებისა და სვეტების ზომა",
                  data:``
              },
              {
                  title:"დაშორებები სვეტებსა და სტრიქონებს შორის",
                  data:``
              },
              {
                  title:"ელემენტების განლაგება",
                  data:``
              },
              {
                  title:"ელემენტების გადაფარვა",
                  data:``
              },
              {
                  title:"ელემენტების მიმართულება და თანმიმდევრობა",
                  data:``
              },
              {
            title:"grid-ხაზებისთვის სახელის მიცემა",
            data:``
              },
              {
                title:"სახელდებული grid-ხაზები და ფუნქცია repeat",
                data:``
                  },
            {
               title:"გრიდის არეები",
                data:``
            
            },
             {
             title:"გვერდის მაკეტი Grid Layout-ის მეშვეობით",
              data:``
              },
                          
            ]
        }
    ]
},

javascript:{
    chapters:[
        {
            title:"თავი 1. შესავალი Javascript-ში",
            content:[
                {
                    title:"რას წარმოადგენს Javascript",
                    
                },
                {
                    title:"პირველი პროგრამა JavaScript-ზე"
                },
                {
                    title:"JavaScript-ის კოდის შესრულება"
                },
                {
                    title:"გარე ფაილის ჩართვა"
                },
                {
                    title:"ბრაუზერის კონსოლი. console.log და document.write"
                }
            ]
        },
        {
            title:"თავი 2. JavaScript-ის საფუძვლები",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },
        {
            title:"თავი 3. ფუნქციონალური პროგრამირება",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },{
            title:"თავი 4. ობიექტზე ორიენტირებული პროგრამირება",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },{
            title:"თავი 5. ჩაშენებული ობიექტები",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },{
            title:"თავი 6. სტრიქონები",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },{
            title:"თავი 7. მუშაობა ბრაუზერთან და BOM (Browser Object Model)",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },{
            title:"თავი 8. DOM (Document Object Model)",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },
        {
            title:"თავი 9. მოვლენები",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },
        {
            title:"თავი 10. მუშაობა ფორმებთან",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },
        {
            title:"თავი 11. JSON",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },
        {
            title:"თავი 12. მონაცემების შენახვა",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },
        {
            title:"თავი 13. Ajax",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        },
    ]
},
node:{
    chapters:[
        {
            title:"dsda",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        }
    ]

},
jquery:{
    chapters:[
        {
            title:"dsda",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        }
    ]

},
php:{
    chapters:[
        {
            title:"dsda",
            content:[
                {
                    title:"",
                    data:``
                },
                {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
              {
                  title:"",
                  data:``
              },
            ]
        }
    ]

}



}